
#
# Plugin Package Properties
#
# http://docs.liferay.com/portal/6.2/propertiesdoc/liferay-plugin-package_6_2_0.properties.html
#

# Set the display name of the plugin.
name=Messenger for Liferay (MUC)

# Specify a module group identifier for the plugin.
module-group-id=liferay

# Specify the starting version number of the plugin.
# Every time a user modifies the plugin, the version number increments by 1
module-incremental-version=1

# Specify a list of comma delimited Liferay versions that are supported by the plugin.
liferay-versions=6.2.0+,6.2.10+

# Specify a list of comma delimited tags that categorize the plugin.
tags=chat,instant messaging,communication,ims,talk,lims

# Provide a short description of the plugin for users to read.
short-description=Brand new IMS for Liferay! Do you like to chat with your friends on your \
  favorite social network? Have you been missing the same functionality in Liferay? Not anymore! \
  Brand new Liferay Instant Messaging System brings you all you ever wanted packed in a single \
  plugin.

# Describe the changes made in the latest release.
# Try to offer all information users might need in deciding whether
# to update from a previous version of the plugin.
change-log=

# Specify the URL of the plugin's home page.
page-url=http://marcelmika.com/liferay-instant-messaging-system

# Specify the plugin's author(s).
author=Marcel Mika

# Specify a list of comma delimited licenses under which the plugin is provided.
licenses=

# Specify all JARs the plugin requires. If any of these JAR files are already present in
# Liferay Portal's "lib" folder, avoid packaging them again by adding them here.
# During deployment, these JARs are copied from Liferay Portal's "lib" folder to the deployed plugin's "lib" folder.
# The JAR files are also added to the plugin's API class path container.
portal-dependency-jars=\
    jstl-api.jar,\
    jstl-impl.jar,\
    slf4j-api.jar,\
    slf4j-log4j12.jar

# Specify all TLDs the plugin requires. If any of these TLD files are already present in
# Liferay Portal's "tld" folder, avoid packaging them again by adding them here.
# During deployment, these TLDs are copied from Liferay Portal's "tld" folder to the deployed plugin's "tld" folder
# and setup in web.xml to facilitate design time DTD validation.
portal-dependency-tlds=\
    c.tld


#
# SECURITY MANAGEMENT
#
# For the list of possible values visit:
# http://docs.liferay.com/portal/6.2/propertiesdoc/liferay-plugin-package_6_2_0.properties.html#Portal Service Security

#
# Set to "true" to enable the Security Manager. If the plugin is being distributed either through Liferay Marketplace
# or through a web site, it must be turned on. Also, the security manager should be turned on when doing final
# testing on applications, due to the assumption that potential users will also have the security manager turned on.
security-manager-enabled=true

#
# Specify the reference IDs of plugins for this plugin to access.
security-manager-class-loader-reference-ids=\
  portal

# Specify which portal properties the plugin is permitted to override.
security-manager-hook-portal-properties-keys=\
    include-and-override,\
    layout.static.portlets.all,\
    login.events.post,\
    servlet.session.destroy.events,\
    session.store.password,\
    application.startup.events,\
    value.object.listener.com.liferay.portal.model.User

#
# Specify names of environment variables that the plugin is permitted to read.
security-manager-properties-read=\
    file.separator,\
    java.io.tmpdir,\
    java.version,\
    java.home,\
    line.separator,\
    javax.net.ssl.keyStore,\
    log4j.configDebug,\
    log4j.configuration,\
    log4j.configuratorClass,\
    log4j.debug,\
    log4j.defaultInitOverride,\
    log4j.ignoreTCL,\
    smack.disabledClasses,\
    smack.provider.file,\
    portal:velocity.engine.logger,\
    portal:velocity.engine.logger.category

#
# Because LIMS needs sockets to connect to Jabber server
security-manager-sockets-connect=*

#
# Because the Smack library used as SDK to Jabber operates on own threads
security-manager-modify-thread=true

#
# Specify portal service classes and/or methods the plugin is
# permitted to access. Use the "#" character as a delimiter between a class and its method.
security-manager-services[portal]=\
    com.liferay.portal.service.UserLocalService#getUserById,\
    com.liferay.portal.service.UserLocalService#getUserByScreenName,\
    com.liferay.portal.service.UserLocalService#getUser,\
    com.liferay.counter.service.CounterLocalService#increment

#
# Specify tables on which the plugin can do any and all operations.
#
# Note: The following table relates to the lims muc portlet itself. Thus the
# portlet needs a full access to them.
security-manager-sql-tables-all=\
    Limsmuc_Settings,\
    Limsmuc_Message,\
    Limsmuc_Participant,\
    Limsmuc_Conversation,\
    Limsmuc_Panel,\
    Limsmuc_Synchronization

#
# Specify tables the plugin can query.
#
# Note: The LIMS MUC portlet needs a read access to users, their groups, user groups, and social
# relations in order to be able to list users in the contact list. Further more, to make the
# sync work, it needs an access to the LIMS SUC and Chat Portlet tables
security-manager-sql-tables-select=\
    User_,\
    Users_UserGroups,\
    UserGroup,\
    SocialRelation,\
    Users_Groups,\
    Group_,\
    Chat_Entry,\
    Chat_Status,\
    Lims_Conversation,\
    Lims_Message,\
    Lims_Panel,\
    Lims_Participant,\
    Lims_Settings

# Specify portal bean properties the plugin is permitted to acquire.
security-manager-get-bean-property=\
    com.liferay.portlet.PortletConfigFactoryUtil

# Specify files the plugin is permitted to read
security-manager-files-read=\
    ${java.io.tmpdir}${file.separator}-,\
    ${liferay.web.portal.dir}/WEB-INF/lib/velocity.jar

# Specify files the plugin is permitted to write
security-manager-files-write=\
    ${java.io.tmpdir}${file.separator}-

# Specify files the plugin is permitted to delete
security-manager-files-delete=\
    ${java.io.tmpdir}${file.separator}-