<?xml version="1.0" encoding="UTF-8"?>
<javadocs><javadoc><name>BuddyCoreServiceImpl</name><type>com.marcelmika.lims.core.service.BuddyCoreServiceImpl</type><comment><![CDATA[Implementation of BuddyCoreService]]></comment><author><![CDATA[Ing. Marcel Mika]]></author><method><name>BuddyCoreServiceImpl</name><comment><![CDATA[Constructor]]></comment><param><name>buddyJabberService</name><type>com.marcelmika.lims.jabber.service.BuddyJabberService</type><required>true</required><comment><![CDATA[jabber service]]></comment></param><param><name>buddyPersistenceService</name><type>com.marcelmika.lims.persistence.service.BuddyPersistenceService</type><required>true</required><comment><![CDATA[persistence service]]></comment></param></method><method><name>loginBuddy</name><comment><![CDATA[Login buddy to System]]></comment><param><name>event</name><type>LoginBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event for login method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for login method]]></comment></return></method><method><name>logoutBuddy</name><comment><![CDATA[Logout buddy from System]]></comment><param><name>event</name><type>LogoutBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><method><name>removeBuddy</name><comment><![CDATA[Completely removes buddy from the System]]></comment><param><name>event</name><type>DeleteBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><method><name>updatePresence</name><comment><![CDATA[Change buddy's presence]]></comment><param><name>event</name><type>UpdatePresenceBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><field><name>log</name></field><field><name>buddyJabberService</name></field><field><name>buddyPersistenceService</name></field></javadoc><javadoc><name>ConversationCoreServiceImpl</name><type>com.marcelmika.lims.core.service.ConversationCoreServiceImpl</type><comment><![CDATA[Implementation of ConversationCoreService]]></comment><author><![CDATA[Ing. Marcel Mika]]></author><method><name>ConversationCoreServiceImpl</name><comment><![CDATA[Constructor]]></comment><param><name>conversationJabberService</name><type>com.marcelmika.lims.jabber.service.ConversationJabberService</type><required>true</required><comment><![CDATA[jabber service]]></comment></param><param><name>conversationPersistenceService</name><type>com.marcelmika.lims.persistence.service.ConversationPersistenceService</type><comment><![CDATA[]]></comment></param></method><method><name>getConversations</name><comment><![CDATA[Get all conversations related to the particular buddy]]></comment><param><name>event</name><type>GetConversationsRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for  method]]></comment></return></method><method><name>getOpenedConversations</name><comment><![CDATA[Get all opened conversations related to the particular buddy]]></comment><param><name>event</name><type>GetOpenedConversationsRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for  method]]></comment></return></method><method><name>createConversation</name><comment><![CDATA[Creates new conversation]]></comment><param><name>event</name><type>CreateConversationRequestEvent</type><required>true</required><comment><![CDATA[Request event for login method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for login method]]></comment></return></method><method><name>readConversation</name><comment><![CDATA[Reads messages from conversation]]></comment><param><name>event</name><type>ReadSingleUserConversationRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for method]]></comment></return></method><method><name>openConversation</name><comment><![CDATA[Opens existing conversation]]></comment><param><name>event</name><type>OpenConversationRequestEvent</type><required>true</required><comment><![CDATA[Request event for login method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for login method]]></comment></return></method><method><name>closeConversation</name><comment><![CDATA[Closes existing conversation. User remains in the conversation though.]]></comment><param><name>event</name><type>CloseConversationRequestEvent</type><required>true</required><comment><![CDATA[Request event for login method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for login method]]></comment></return></method><method><name>resetUnreadMessagesCounter</name><comment><![CDATA[Reset counter of unread messages (usually displayed in badge) for the particular user and conversation]]></comment><param><name>event</name><type>ResetUnreadMessagesCounterRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for method]]></comment></return></method><method><name>leaveConversation</name><comment><![CDATA[Removes buddy from the conversation]]></comment><param><name>event</name><type>LeaveConversationRequestEvent</type><required>true</required><comment><![CDATA[Request event for login method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for login method]]></comment></return></method><method><name>addBuddies</name><comment><![CDATA[Adds buddies to the conversation]]></comment><param><name>event</name><type>AddBuddiesRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for method]]></comment></return></method><method><name>sendMessage</name><comment><![CDATA[Sends message to conversation]]></comment><param><name>event</name><type>SendMessageRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for method]]></comment></return></method><field><name>conversationJabberService</name></field><field><name>conversationPersistenceService</name></field></javadoc><javadoc><name>GroupCoreServiceImpl</name><type>com.marcelmika.lims.core.service.GroupCoreServiceImpl</type><author><![CDATA[Ing. Marcel Mika]]></author><method><name>GroupCoreServiceImpl</name><comment><![CDATA[Constructor]]></comment><param><name>groupJabberService</name><type>com.marcelmika.lims.jabber.service.GroupJabberService</type><required>true</required><comment><![CDATA[jabber service]]></comment></param><param><name>groupPersistenceService</name><type>com.marcelmika.lims.persistence.service.GroupPersistenceService</type><comment><![CDATA[]]></comment></param></method><method><name>getGroups</name><comment><![CDATA[Get all groups related to the particular user]]></comment><param><name>event</name><type>com.marcelmika.lims.api.events.group.GetGroupsRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for  method]]></comment></return></method><field><name>groupJabberService</name></field><field><name>groupPersistenceService</name></field></javadoc><javadoc><name>SettingsCoreServiceImpl</name><type>com.marcelmika.lims.core.service.SettingsCoreServiceImpl</type><comment><![CDATA[Implementation of SettingsCoreService]]></comment><author><![CDATA[Ing. Marcel Mika]]></author><method><name>SettingsCoreServiceImpl</name><comment><![CDATA[Constructor]]></comment><param><name>settingsPersistenceService</name><type>com.marcelmika.lims.persistence.service.SettingsPersistenceService</type><required>true</required><comment><![CDATA[persistence service]]></comment></param></method><method><name>readSettings</name><comment><![CDATA[Reads buddy's settings]]></comment><param><name>event</name><type>ReadSettingsRequestEvent</type><required>true</required><comment><![CDATA[Request event]]></comment></param><return><required>true</required><comment><![CDATA[Response event]]></comment></return></method><method><name>updateActivePanel</name><comment><![CDATA[Change buddy's presence]]></comment><param><name>event</name><type>UpdateActivePanelRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><method><name>updateSettings</name><comment><![CDATA[Update buddy's settings]]></comment><param><name>event</name><type>UpdateSettingsRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><method><name>enableChat</name><comment><![CDATA[Enables chat for buddy]]></comment><param><name>event</name><type>EnableChatRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><method><name>disableChat</name><comment><![CDATA[Disables chat for buddy]]></comment><param><name>event</name><type>DisableChatRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><field><name>settingsPersistenceService</name></field></javadoc><javadoc><name>BuddyJabberServiceImpl</name><type>com.marcelmika.lims.jabber.service.BuddyJabberServiceImpl</type><author><![CDATA[Ing. Marcel Mika]]></author><method><name>BuddyJabberServiceImpl</name><comment><![CDATA[BuddyJabberServiceImpl]]></comment><param><name>userSessionStore</name><type>com.marcelmika.lims.jabber.session.store.UserSessionStore</type><required>true</required><comment><![CDATA[UserSessionStore]]></comment></param></method><method><name>connectBuddy</name><comment><![CDATA[Connect buddy to the Jabber server]]></comment><param><name>event</name><type>ConnectBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event for method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for method]]></comment></return></method><method><name>loginBuddy</name><comment><![CDATA[Login buddy to Jabber]]></comment><param><name>event</name><type>LoginBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event for login method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for login method]]></comment></return></method><method><name>logoutBuddy</name><comment><![CDATA[Logout buddy from Jabber]]></comment><param><name>event</name><type>LogoutBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><method><name>updatePresence</name><comment><![CDATA[Change buddy's status]]></comment><param><name>event</name><type>UpdatePresenceBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><field><name>userSessionStore</name></field></javadoc><javadoc><name>ConversationJabberServiceImpl</name><type>com.marcelmika.lims.jabber.service.ConversationJabberServiceImpl</type><author><![CDATA[Ing. Marcel Mika]]></author><method><name>ConversationJabberServiceImpl</name><comment><![CDATA[Constructor]]></comment><param><name>userSessionStore</name><type>com.marcelmika.lims.jabber.session.store.UserSessionStore</type><required>true</required><comment><![CDATA[UserSessionStore]]></comment></param></method><method><name>createConversation</name><comment><![CDATA[Creates new conversation]]></comment><param><name>event</name><type>CreateConversationRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for  method]]></comment></return></method><method><name>getConversations</name><comment><![CDATA[Get all conversations related to the particular buddy]]></comment><param><name>event</name><type>GetConversationsRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for  method]]></comment></return></method><method><name>sendMessage</name><comment><![CDATA[Sends message to conversation]]></comment><param><name>event</name><type>SendMessageRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for method]]></comment></return></method><method><name>createSingleUserConversation</name><comment><![CDATA[Creates a single user conversation]]></comment><param><name>conversation</name><type>com.marcelmika.lims.jabber.domain.SingleUserConversation</type><required>true</required><comment><![CDATA[SingleUserConversation]]></comment></param><param><name>session</name><type>com.marcelmika.lims.jabber.session.UserSession</type><required>true</required><comment><![CDATA[UserSession]]></comment></param><return><required>true</required><comment><![CDATA[CreateConversationResponseEvent]]></comment></return></method><method><name>sendSingleUserMessage</name><comment><![CDATA[Sends message to a single user conversation]]></comment><param><name>conversation</name><type>com.marcelmika.lims.jabber.domain.SingleUserConversation</type><required>true</required><comment><![CDATA[SingleUserConversation]]></comment></param><param><name>message</name><type>com.marcelmika.lims.jabber.domain.Message</type><required>true</required><comment><![CDATA[Message]]></comment></param><param><name>session</name><type>com.marcelmika.lims.jabber.session.UserSession</type><required>true</required><comment><![CDATA[UserSession]]></comment></param><return><required>true</required><comment><![CDATA[SendMessageResponseEvent]]></comment></return></method><field><name>log</name></field><field><name>userSessionStore</name></field></javadoc><javadoc><name>GroupJabberServiceImpl</name><type>com.marcelmika.lims.jabber.service.GroupJabberServiceImpl</type><author><![CDATA[Ing. Marcel Mika]]></author><method><name>GroupJabberServiceImpl</name><comment><![CDATA[Constructor]]></comment><param><name>userSessionStore</name><type>com.marcelmika.lims.jabber.session.store.UserSessionStore</type><required>true</required><comment><![CDATA[UserSessionStore]]></comment></param></method><method><name>getGroups</name><comment><![CDATA[Get all groups related to the particular user]]></comment><param><name>event</name><type>com.marcelmika.lims.api.events.group.GetGroupsRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for  method]]></comment></return></method><field><name>userSessionStore</name></field></javadoc><javadoc><name>ConversationLocalServiceImpl</name><type>com.marcelmika.lims.persistence.generated.service.impl.ConversationLocalServiceImpl</type><comment><![CDATA[The implementation of the conversation local service.

<p>
All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.service.ConversationLocalService} interface.  <p> This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
</p>]]></comment><author><![CDATA[Brian Wing Shun Chan]]></author><see><![CDATA[com.marcelmika.lims.persistence.generated.service.base.ConversationLocalServiceBaseImpl]]></see><see><![CDATA[com.marcelmika.lims.persistence.generated.service.ConversationLocalServiceUtil]]></see><method><name>addConversation</name><param><name>conversationId</name><type>java.lang.String</type><comment><![CDATA[]]></comment></param><param><name>conversationType</name><type>java.lang.String</type><comment><![CDATA[]]></comment></param><return><comment><![CDATA[]]></comment></return><throws><name>SystemException</name><type>com.liferay.portal.kernel.exception.SystemException</type><comment><![CDATA[]]></comment></throws></method><method><name>getConversation</name><param><name>conversationId</name><type>java.lang.String</type><comment><![CDATA[]]></comment></param><return><comment><![CDATA[]]></comment></return><throws><name>SystemException</name><type>com.liferay.portal.kernel.exception.SystemException</type><comment><![CDATA[]]></comment></throws></method><method><name>updateConversationTimestamp</name><param><name>cid</name><type>long</type><comment><![CDATA[]]></comment></param><throws><name>Exception</name><type>java.lang.Exception</type><comment><![CDATA[]]></comment></throws></method></javadoc><javadoc><name>MessageLocalServiceImpl</name><type>com.marcelmika.lims.persistence.generated.service.impl.MessageLocalServiceImpl</type><comment><![CDATA[The implementation of the message local service. <p/>

<p>
All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.service.MessageLocalService} interface. <p/> <p> This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
</p>]]></comment><author><![CDATA[Brian Wing Shun Chan]]></author><see><![CDATA[com.marcelmika.lims.persistence.generated.service.base.MessageLocalServiceBaseImpl]]></see><see><![CDATA[com.marcelmika.lims.persistence.generated.service.MessageLocalServiceUtil]]></see><method><name>addMessage</name><param><name>cid</name><type>long</type><comment><![CDATA[]]></comment></param><param><name>creatorId</name><type>long</type><comment><![CDATA[]]></comment></param><param><name>body</name><type>java.lang.String</type><comment><![CDATA[]]></comment></param><param><name>messageHash</name><type>java.lang.String</type><comment><![CDATA[]]></comment></param><return><comment><![CDATA[]]></comment></return><throws><name>Exception</name><type>java.lang.Exception</type><comment><![CDATA[]]></comment></throws></method><method><name>readMessages</name><param><name>cid</name><type>long</type><comment><![CDATA[]]></comment></param><param><name>start</name><type>int</type><comment><![CDATA[]]></comment></param><param><name>end</name><type>int</type><comment><![CDATA[]]></comment></param><return><comment><![CDATA[]]></comment></return><throws><name>SystemException</name><type>com.liferay.portal.kernel.exception.SystemException</type><comment><![CDATA[]]></comment></throws></method></javadoc><javadoc><name>PanelLocalServiceImpl</name><type>com.marcelmika.lims.persistence.generated.service.impl.PanelLocalServiceImpl</type><comment><![CDATA[The implementation of the panel local service.

<p>
All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.service.PanelLocalService} interface.  <p> This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
</p>]]></comment><author><![CDATA[Brian Wing Shun Chan]]></author><see><![CDATA[com.marcelmika.lims.persistence.generated.service.base.PanelLocalServiceBaseImpl]]></see><see><![CDATA[com.marcelmika.lims.persistence.generated.service.PanelLocalServiceUtil]]></see><method><name>getPanelByUser</name><comment><![CDATA[Returns panel. Creates new if not found. Null on error]]></comment><param><name>userId</name><type>long</type><comment><![CDATA[]]></comment></param><return><comment><![CDATA[]]></comment></return></method><method><name>updateActivePanel</name><param><name>userId</name><type>long</type><comment><![CDATA[]]></comment></param><param><name>activePanel</name><type>java.lang.String</type><comment><![CDATA[]]></comment></param><throws><name>Exception</name><type>java.lang.Exception</type><comment><![CDATA[]]></comment></throws></method></javadoc><javadoc><name>ParticipantLocalServiceImpl</name><type>com.marcelmika.lims.persistence.generated.service.impl.ParticipantLocalServiceImpl</type><comment><![CDATA[The implementation of the participant local service.

<p>
All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.service.ParticipantLocalService} interface.  <p> This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
</p>]]></comment><author><![CDATA[Brian Wing Shun Chan]]></author><see><![CDATA[com.marcelmika.lims.persistence.generated.service.base.ParticipantLocalServiceBaseImpl]]></see><see><![CDATA[com.marcelmika.lims.persistence.generated.service.ParticipantLocalServiceUtil]]></see><method><name>addParticipant</name><comment><![CDATA[Adds new participant to the system]]></comment><param><name>cid</name><type>java.lang.Long</type><required>true</required><comment><![CDATA[Id of the conversation to which the participant belongs to]]></comment></param><param><name>participantId</name><type>java.lang.Long</type><required>true</required><comment><![CDATA[User Id of the participant]]></comment></param><return><required>true</required><comment><![CDATA[Participant Model]]></comment></return><throws><name>SystemException</name><type>com.liferay.portal.kernel.exception.SystemException</type><comment><![CDATA[]]></comment></throws></method><method><name>updateParticipants</name><comment><![CDATA[Given method updates all participants related to the conversation. By updated we mean incrementing of the unread message count if needed and opening the conversation if needed]]></comment><param><name>cid</name><type>java.lang.Long</type><required>true</required><comment><![CDATA[Id of the conversation related to the participants]]></comment></param><throws><name>SystemException</name><type>com.liferay.portal.kernel.exception.SystemException</type><required>true</required><comment><![CDATA[]]></comment></throws><throws><name>PortalException</name><type>com.liferay.portal.kernel.exception.PortalException</type><comment><![CDATA[]]></comment></throws></method><method><name>closeConversation</name><comment><![CDATA[Closes conversation for the particular participant id by setting isOpened flag to false.]]></comment><param><name>conversationId</name><type>java.lang.String</type><required>true</required><comment><![CDATA[Conversation which should be closed]]></comment></param><param><name>participantId</name><type>java.lang.Long</type><required>true</required><comment><![CDATA[Participant whose conversation should be closed]]></comment></param><throws><name>com.marcelmika.lims.persistence.generated.NoSuchConversationException</name><type>com.marcelmika.lims.persistence.generated.NoSuchConversationException</type><required>true</required><comment><![CDATA[]]></comment></throws><throws><name>SystemException</name><type>com.liferay.portal.kernel.exception.SystemException</type><required>true</required><comment><![CDATA[]]></comment></throws><throws><name>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</name><type>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</type><comment><![CDATA[]]></comment></throws></method><method><name>resetUnreadMessagesCounter</name><comment><![CDATA[Resets counter of unread messages for the user who participates in the given conversation]]></comment><param><name>conversationId</name><type>java.lang.String</type><required>true</required><comment><![CDATA[Conversation where the counter should be reset]]></comment></param><param><name>participantId</name><type>java.lang.Long</type><required>true</required><comment><![CDATA[Participant whose counter should be reset]]></comment></param><throws><name>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</name><type>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</type><comment><![CDATA[]]></comment></throws><throws><name>SystemException</name><type>com.liferay.portal.kernel.exception.SystemException</type><required>true</required><comment><![CDATA[]]></comment></throws><throws><name>com.marcelmika.lims.persistence.generated.NoSuchConversationException</name><type>com.marcelmika.lims.persistence.generated.NoSuchConversationException</type><comment><![CDATA[]]></comment></throws></method><method><name>getOpenedConversations</name><comment><![CDATA[Returns a list of opened conversations where the the user participates]]></comment><param><name>participantId</name><type>java.lang.Long</type><required>true</required><comment><![CDATA[User Id of the participant]]></comment></param><return><required>true</required><comment><![CDATA[List of opened conversations]]></comment></return><throws><name>SystemException</name><type>com.liferay.portal.kernel.exception.SystemException</type><required>true</required><comment><![CDATA[]]></comment></throws></method><method><name>getConversationParticipants</name><comment><![CDATA[Returns a list of users who participates in conversation]]></comment><param><name>cid</name><type>java.lang.Long</type><required>true</required><comment><![CDATA[Id of the conversation related to the participants]]></comment></param><return><required>true</required><comment><![CDATA[list of participants]]></comment></return><throws><name>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</name><type>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</type><comment><![CDATA[]]></comment></throws><throws><name>SystemException</name><type>com.liferay.portal.kernel.exception.SystemException</type><required>true</required><comment><![CDATA[]]></comment></throws></method><method><name>getParticipant</name><comment><![CDATA[Returns particular participant based on the id]]></comment><param><name>cid</name><type>java.lang.Long</type><comment><![CDATA[]]></comment></param><param><name>participantId</name><type>java.lang.Long</type><required>true</required><comment><![CDATA[Id of the participant]]></comment></param><return><required>true</required><comment><![CDATA[participant]]></comment></return><throws><name>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</name><type>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</type><comment><![CDATA[]]></comment></throws><throws><name>SystemException</name><type>com.liferay.portal.kernel.exception.SystemException</type><required>true</required><comment><![CDATA[]]></comment></throws></method></javadoc><javadoc><name>SettingsLocalServiceImpl</name><type>com.marcelmika.lims.persistence.generated.service.impl.SettingsLocalServiceImpl</type><comment><![CDATA[The implementation of the settings local service. <p/>

<p>
All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.service.SettingsLocalService} interface. <p/> <p> This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
</p>]]></comment><author><![CDATA[Brian Wing Shun Chan]]></author><see><![CDATA[com.marcelmika.lims.persistence.generated.service.base.SettingsLocalServiceBaseImpl]]></see><see><![CDATA[com.marcelmika.lims.persistence.generated.service.SettingsLocalServiceUtil]]></see><method><name>getSettingsByUser</name><comment><![CDATA[Returns settings related to the user whose id is given in the parameter]]></comment><param><name>userId</name><type>long</type><required>true</required><comment><![CDATA[id of the user whose setting you are requesting]]></comment></param><return><required>true</required><comment><![CDATA[Settings]]></comment></return><throws><name>Exception</name><type>java.lang.Exception</type><required>true</required><comment><![CDATA[]]></comment></throws></method><method><name>saveSettings</name><comment><![CDATA[Saves settings object to persistence]]></comment><param><name>settings</name><type>com.marcelmika.lims.persistence.generated.model.Settings</type><required>true</required><comment><![CDATA[Settings model]]></comment></param><return><required>true</required><comment><![CDATA[Updated Settings]]></comment></return><throws><name>SystemException</name><type>com.liferay.portal.kernel.exception.SystemException</type><required>true</required><comment><![CDATA[]]></comment></throws></method><method><name>changePresence</name><comment><![CDATA[Updates user presence]]></comment><param><name>userId</name><type>long</type><required>true</required><comment><![CDATA[id of the user whose presence should be updated]]></comment></param><param><name>presence</name><type>java.lang.String</type><required>true</required><comment><![CDATA[new value of the presence]]></comment></param><throws><name>Exception</name><type>java.lang.Exception</type><required>true</required><comment><![CDATA[]]></comment></throws></method><method><name>setChatEnabled</name><comment><![CDATA[Updates chat enabled value. If set to true the portlet is fully functional. If set to false the chat will be disabled.]]></comment><param><name>userId</name><type>long</type><required>true</required><comment><![CDATA[id of the user whose chat should be enabled/disabled]]></comment></param><param><name>enabled</name><type>boolean</type><required>true</required><comment><![CDATA[if set to true the chat will be enabled. If set to false it will be disabled.]]></comment></param><throws><name>Exception</name><type>java.lang.Exception</type><required>true</required><comment><![CDATA[]]></comment></throws></method><method><name>getAllGroups</name><comment><![CDATA[Returns all buddies in the system]]></comment><param><name>userId</name><type>java.lang.Long</type><required>true</required><comment><![CDATA[of excluded user]]></comment></param><param><name>ignoreDefaultUser</name><type>boolean</type><required>true</required><comment><![CDATA[true if default users should be ignored]]></comment></param><param><name>start</name><type>int</type><required>true</required><comment><![CDATA[value of the list]]></comment></param><param><name>end</name><type>int</type><required>true</required><comment><![CDATA[value of the list]]></comment></param><return><required>true</required><comment><![CDATA[List of objects where each object contains user info]]></comment></return><throws><name>Exception</name><type>java.lang.Exception</type><required>true</required><comment><![CDATA[]]></comment></throws></method><method><name>getSitesGroups</name><comment><![CDATA[Returns all groups where the user participates]]></comment><param><name>userId</name><type>java.lang.Long</type><required>true</required><comment><![CDATA[of the user whose groups are we looking for]]></comment></param><param><name>ignoreDefaultUser</name><type>boolean</type><required>true</required><comment><![CDATA[true if default users should be ignored]]></comment></param><param><name>excludedSties</name><type>java.lang.String[]</type><required>true</required><comment><![CDATA[list of names of sites which should be excluded]]></comment></param><param><name>start</name><type>int</type><required>true</required><comment><![CDATA[value of the list]]></comment></param><param><name>end</name><type>int</type><required>true</required><comment><![CDATA[value of the list]]></comment></param><return><required>true</required><comment><![CDATA[List of objects where each object contains group name and user info]]></comment></return><throws><name>Exception</name><type>java.lang.Exception</type><required>true</required><comment><![CDATA[]]></comment></throws></method><method><name>getSocialGroups</name><comment><![CDATA[Returns all user's social relations]]></comment><param><name>userId</name><type>java.lang.Long</type><required>true</required><comment><![CDATA[of the user whose social relations are we looking for]]></comment></param><param><name>ignoreDefaultUser</name><type>boolean</type><required>true</required><comment><![CDATA[true if default users should be ignored]]></comment></param><param><name>relationTypes</name><type>int[]</type><required>true</required><comment><![CDATA[an array of relation type codes that we are looking for]]></comment></param><param><name>start</name><type>int</type><required>true</required><comment><![CDATA[value of the list]]></comment></param><param><name>end</name><type>int</type><required>true</required><comment><![CDATA[value of the list]]></comment></param><return><required>true</required><comment><![CDATA[List objects where each object contains relation type and user info]]></comment></return><throws><name>Exception</name><type>java.lang.Exception</type><required>true</required><comment><![CDATA[]]></comment></throws></method></javadoc><javadoc><name>BuddyPersistenceServiceImpl</name><type>com.marcelmika.lims.persistence.service.BuddyPersistenceServiceImpl</type><author><![CDATA[Ing. Marcel Mika]]></author><method><name>loginBuddy</name><comment><![CDATA[Login buddy to System]]></comment><param><name>event</name><type>LoginBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event for login method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for login method]]></comment></return></method><method><name>logoutBuddy</name><comment><![CDATA[Logout buddy from System]]></comment><param><name>event</name><type>LogoutBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><method><name>removeBuddy</name><comment><![CDATA[Completely removes buddy from Persistence]]></comment><param><name>event</name><type>DeleteBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><method><name>readPresence</name><comment><![CDATA[Reads buddy's presence]]></comment><param><name>event</name><type>ReadPresenceBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event]]></comment></param><return><required>true</required><comment><![CDATA[Response event]]></comment></return></method><method><name>updatePresence</name><comment><![CDATA[Change buddy's presence]]></comment><param><name>event</name><type>UpdatePresenceBuddyRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method></javadoc><javadoc><name>ConversationPersistenceServiceImpl</name><type>com.marcelmika.lims.persistence.service.ConversationPersistenceServiceImpl</type><author><![CDATA[Ing. Marcel Mika]]></author><method><name>createConversation</name><comment><![CDATA[Creates new conversation]]></comment><param><name>event</name><type>CreateConversationRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for  method]]></comment></return></method><method><name>readConversation</name><comment><![CDATA[Reads messages from conversation]]></comment><param><name>event</name><type>ReadSingleUserConversationRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for method]]></comment></return></method><method><name>closeConversation</name><comment><![CDATA[Closes existing conversation. User remains in the conversation though.]]></comment><param><name>event</name><type>CloseConversationRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for method]]></comment></return></method><method><name>resetUnreadMessagesCounter</name><comment><![CDATA[Reset counter of unread messages (usually displayed in badge) for the particular user and conversation]]></comment><param><name>event</name><type>ResetUnreadMessagesCounterRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for method]]></comment></return></method><method><name>sendMessage</name><comment><![CDATA[Creates message within the conversation]]></comment><param><name>event</name><type>SendMessageRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for method]]></comment></return></method><method><name>getOpenedConversations</name><comment><![CDATA[Get all opened conversations related to the particular buddy]]></comment><param><name>event</name><type>GetOpenedConversationsRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for  method]]></comment></return></method><field><name>log</name></field></javadoc><javadoc><name>GroupPersistenceServiceImpl</name><type>com.marcelmika.lims.persistence.service.GroupPersistenceServiceImpl</type><author><![CDATA[Ing. Marcel Mika]]></author><method><name>GroupPersistenceServiceImpl</name><comment><![CDATA[Constructor]]></comment><param><name>groupManager</name><type>com.marcelmika.lims.persistence.manager.GroupManager</type><required>true</required><comment><![CDATA[GroupManager]]></comment></param></method><method><name>getGroups</name><comment><![CDATA[Get all groups related to the particular user]]></comment><param><name>event</name><type>com.marcelmika.lims.api.events.group.GetGroupsRequestEvent</type><required>true</required><comment><![CDATA[request event for method]]></comment></param><return><required>true</required><comment><![CDATA[response event for  method]]></comment></return></method><field><name>log</name></field><field><name>groupManager</name></field></javadoc><javadoc><name>SettingsPersistenceServiceImpl</name><type>com.marcelmika.lims.persistence.service.SettingsPersistenceServiceImpl</type><author><![CDATA[Ing. Marcel Mika]]></author><method><name>readSettings</name><comment><![CDATA[Reads buddy's settings]]></comment><param><name>event</name><type>ReadSettingsRequestEvent</type><required>true</required><comment><![CDATA[Request event]]></comment></param><return><required>true</required><comment><![CDATA[Response event]]></comment></return></method><method><name>updateActivePanel</name><comment><![CDATA[Update buddy's active panel (panel which is open)]]></comment><param><name>event</name><type>UpdateActivePanelRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><method><name>updateSettings</name><comment><![CDATA[Update buddy's settings]]></comment><param><name>event</name><type>UpdateSettingsRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><method><name>enableChat</name><comment><![CDATA[Enables chat for buddy]]></comment><param><name>event</name><type>EnableChatRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method><method><name>disableChat</name><comment><![CDATA[Disables chat for buddy]]></comment><param><name>event</name><type>DisableChatRequestEvent</type><required>true</required><comment><![CDATA[Request event for logout method]]></comment></param><return><required>true</required><comment><![CDATA[Response event for logout method]]></comment></return></method></javadoc></javadocs>