<?xml version="1.0"?>

<javadocs>
	<javadoc>
		<name>BuddyCollectionDetails</name>
		<type>com.marcelmika.lims.api.entity.BuddyCollectionDetails</type>
		<comment><![CDATA[Container which holds a collection of buddy details]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getBuddies</name>
			<comment><![CDATA[Get the collection of buddy details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[Collection of buddy details]]></comment>
			</return>
		</method>
		<method>
			<name>addBuddyDetails</name>
			<comment><![CDATA[Add buddy details to the collection]]></comment>
			<param>
				<name>buddyDetails</name>
				<type>BuddyDetails</type>
				<required>true</required>
				<comment><![CDATA[to be added]]></comment>
			</param>
		</method>
		<method>
			<name>removeBuddyDetails</name>
			<comment><![CDATA[Remove buddy details from the collection.]]></comment>
			<param>
				<name>buddyDetails</name>
				<type>BuddyDetails</type>
				<required>true</required>
				<comment><![CDATA[to be removed]]></comment>
			</param>
		</method>
		<field>
			<name>buddyDetailsMap</name>
		</field>
	</javadoc>
	<javadoc>
		<name>BuddyDetails</name>
		<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getBuddyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBuddyId</name>
			<param>
				<name>buddyId</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getFullName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFullName</name>
			<param>
				<name>fullName</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getScreenName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setScreenName</name>
			<param>
				<name>screenName</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getPassword</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPassword</name>
			<param>
				<name>password</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getPresenceDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPresenceDetails</name>
			<param>
				<name>presenceDetails</name>
				<type>PresenceDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getSettingsDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setSettingsDetails</name>
			<param>
				<name>settingsDetails</name>
				<type>SettingsDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyId</name>
		</field>
		<field>
			<name>fullName</name>
		</field>
		<field>
			<name>screenName</name>
		</field>
		<field>
			<name>password</name>
		</field>
		<field>
			<name>presenceDetails</name>
		</field>
		<field>
			<name>settingsDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConversationDetails</name>
		<type>com.marcelmika.lims.api.entity.ConversationDetails</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationId</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getConversationType</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationType</name>
			<param>
				<name>conversationType</name>
				<type>ConversationTypeDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getUnreadMessagesCount</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setUnreadMessagesCount</name>
			<param>
				<name>unreadMessagesCount</name>
				<type>java.lang.Integer</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddy</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBuddy</name>
			<param>
				<name>buddy</name>
				<type>BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getParticipants</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setParticipants</name>
			<param>
				<name>participants</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getMessages</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMessages</name>
			<param>
				<name>messages</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getUpdatedAt</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setUpdatedAt</name>
			<param>
				<name>updatedAt</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>conversationId</name>
		</field>
		<field>
			<name>conversationType</name>
		</field>
		<field>
			<name>unreadMessagesCount</name>
		</field>
		<field>
			<name>buddy</name>
		</field>
		<field>
			<name>messages</name>
		</field>
		<field>
			<name>participants</name>
		</field>
		<field>
			<name>updatedAt</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConversationTypeDetails</name>
		<type>com.marcelmika.lims.api.entity.ConversationTypeDetails</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>ConversationTypeDetails</name>
			<param>
				<name>code</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getCode</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>SINGLE_USER</name>
		</field>
		<field>
			<name>MULTI_USER</name>
		</field>
		<field>
			<name>UNRECOGNIZED</name>
		</field>
		<field>
			<name>code</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GroupCollectionDetails</name>
		<type>com.marcelmika.lims.api.entity.GroupCollectionDetails</type>
		<comment><![CDATA[Simple container that holds groups]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getGroups</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setGroups</name>
			<param>
				<name>groups</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getLastModified</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setLastModified</name>
			<param>
				<name>lastModified</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>groups</name>
		</field>
		<field>
			<name>lastModified</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GroupDetails</name>
		<type>com.marcelmika.lims.api.entity.GroupDetails</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getBuddies</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>addBuddyDetails</name>
			<param>
				<name>buddy</name>
				<type>BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setName</name>
			<param>
				<name>name</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getLastModified</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setLastModified</name>
			<param>
				<name>lastModified</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>name</name>
		</field>
		<field>
			<name>buddies</name>
		</field>
		<field>
			<name>lastModified</name>
		</field>
	</javadoc>
	<javadoc>
		<name>MessageDetails</name>
		<type>com.marcelmika.lims.api.entity.MessageDetails</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getFrom</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFrom</name>
			<param>
				<name>from</name>
				<type>BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getMessageHash</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMessageHash</name>
			<param>
				<name>messageHash</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getCreatedAt</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setCreatedAt</name>
			<param>
				<name>createdAt</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBody</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBody</name>
			<param>
				<name>body</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>from</name>
		</field>
		<field>
			<name>body</name>
		</field>
		<field>
			<name>createdAt</name>
		</field>
		<field>
			<name>messageHash</name>
		</field>
	</javadoc>
	<javadoc>
		<name>PaginationDetails</name>
		<type>com.marcelmika.lims.api.entity.PaginationDetails</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getFirstMessageId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFirstMessageId</name>
			<param>
				<name>firstMessageId</name>
				<type>java.lang.Integer</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getLastMessageId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setLastMessageId</name>
			<param>
				<name>lastMessageId</name>
				<type>java.lang.Integer</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getAction</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setAction</name>
			<param>
				<name>action</name>
				<type>com.marcelmika.lims.api.entity.PaginationDetails.ActionDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>firstMessageId</name>
		</field>
		<field>
			<name>lastMessageId</name>
		</field>
		<field>
			<name>action</name>
		</field>
	</javadoc>
	<javadoc>
		<name>PresenceDetails</name>
		<type>com.marcelmika.lims.api.entity.PresenceDetails</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>PresenceDetails</name>
			<param>
				<name>code</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getCode</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>ACTIVE</name>
		</field>
		<field>
			<name>AWAY</name>
		</field>
		<field>
			<name>DND</name>
		</field>
		<field>
			<name>OFFLINE</name>
		</field>
		<field>
			<name>UNRECOGNIZED</name>
		</field>
		<field>
			<name>code</name>
		</field>
	</javadoc>
	<javadoc>
		<name>SettingsDetails</name>
		<type>com.marcelmika.lims.api.entity.SettingsDetails</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getPresenceDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPresenceDetails</name>
			<param>
				<name>presenceDetails</name>
				<type>PresenceDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getActivePanelId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setActivePanelId</name>
			<param>
				<name>activePanelId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>isMute</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMute</name>
			<param>
				<name>isMute</name>
				<type>boolean</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>isChatEnabled</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setChatEnabled</name>
			<param>
				<name>isChatEnabled</name>
				<type>boolean</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>presenceDetails</name>
		</field>
		<field>
			<name>activePanelId</name>
		</field>
		<field>
			<name>isMute</name>
		</field>
		<field>
			<name>isChatEnabled</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Environment</name>
		<type>com.marcelmika.lims.api.environment.Environment</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getBuddyListSource</name>
			<comment><![CDATA[Returns source of the buddy list property]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[BuddyListSource]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddyListStrategy</name>
			<comment><![CDATA[Returns strategy for buddy list generation]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[BuddyListStrategy]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddyListAllowedSocialRelationTypes</name>
			<comment><![CDATA[Returns an array of allowed social relation types enums]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[BuddyListSocialRelation[]]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddyListMaxBuddies</name>
			<comment><![CDATA[Returns maximal buddies count in list]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[int]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddyListExcludes</name>
			<comment><![CDATA[Returns an array of sites names which should be excluded from the buddy list]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[String[]]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddyListIgnoreDefaultUser</name>
			<comment><![CDATA[Returns true if the default user should be ignored. Default user is the user which has the defaultUser flag in database set to true.]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[boolean]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationListMaxMessages</name>
			<comment><![CDATA[Returns maximal messages count in list]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[int]]></comment>
			</return>
		</method>
		<method>
			<name>isJabberEnabled</name>
			<comment><![CDATA[Return true if communication via jabber is enabled]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[boolean]]></comment>
			</return>
		</method>
		<method>
			<name>getJabberHost</name>
			<comment><![CDATA[Returns jabber server host property]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[String jabber host]]></comment>
			</return>
		</method>
		<method>
			<name>getJabberPort</name>
			<comment><![CDATA[Returns jabber server port property]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[int jabber port]]></comment>
			</return>
		</method>
		<method>
			<name>getJabberServiceName</name>
			<comment><![CDATA[Returns jabber server service name property]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[String jabber service name]]></comment>
			</return>
		</method>
		<method>
			<name>getJabberResource</name>
			<comment><![CDATA[Returns jabber server resource property]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[String jabber resource]]></comment>
			</return>
		</method>
		<method>
			<name>isJabberSock5ProxyEnabled</name>
			<comment><![CDATA[Returns true if jabber SOCK5 proxy mechanism is enabled]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[boolean]]></comment>
			</return>
		</method>
		<method>
			<name>getJabberSock5ProxyPort</name>
			<comment><![CDATA[Returns jabber SOCK5 port]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[int jabber SOCK5 port]]></comment>
			</return>
		</method>
		<method>
			<name>isSaslPlainEnabled</name>
			<comment><![CDATA[Returns true if SASL authentication mechanism is enabled]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[boolean]]></comment>
			</return>
		</method>
		<method>
			<name>getSaslPlainAuthId</name>
			<comment><![CDATA[Returns SASL Authentication ID]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[String auth ID]]></comment>
			</return>
		</method>
		<method>
			<name>getSaslPlainPassword</name>
			<comment><![CDATA[Returns password for SASL authentication]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[String password]]></comment>
			</return>
		</method>
		<field>
			<name>log</name>
		</field>
	</javadoc>
	<javadoc>
		<name>RequestEvent</name>
		<type>com.marcelmika.lims.api.events.RequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
	</javadoc>
	<javadoc>
		<name>ResponseEvent</name>
		<type>com.marcelmika.lims.api.events.ResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getResult</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>isSuccess</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getException</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>result</name>
		</field>
		<field>
			<name>success</name>
		</field>
		<field>
			<name>exception</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConnectBuddyRequestEvent</name>
		<type>com.marcelmika.lims.api.events.buddy.ConnectBuddyRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>ConnectBuddyRequestEvent</name>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>details</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConnectBuddyResponseEvent</name>
		<type>com.marcelmika.lims.api.events.buddy.ConnectBuddyResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>connectFailure</name>
			<comment><![CDATA[Factory method which creates new success response object]]></comment>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[textual description of the success]]></comment>
			</param>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<required>true</required>
				<comment><![CDATA[related to the event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ConnectBuddyResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>connectSuccess</name>
			<comment><![CDATA[Factory method which creates new failure response object]]></comment>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[textual description of the failure]]></comment>
			</param>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<required>true</required>
				<comment><![CDATA[related to the event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ConnectBuddyResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>getDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>details</name>
		</field>
	</javadoc>
	<javadoc>
		<name>DeleteBuddyRequestEvent</name>
		<type>com.marcelmika.lims.api.events.buddy.DeleteBuddyRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>DeleteBuddyRequestEvent</name>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>details</name>
		</field>
	</javadoc>
	<javadoc>
		<name>DeleteBuddyResponseEvent</name>
		<type>com.marcelmika.lims.api.events.buddy.DeleteBuddyResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>removeFailure</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>removeSuccess</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>details</name>
		</field>
	</javadoc>
	<javadoc>
		<name>LoginBuddyRequestEvent</name>
		<type>com.marcelmika.lims.api.events.buddy.LoginBuddyRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>LoginBuddyRequestEvent</name>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>details</name>
		</field>
	</javadoc>
	<javadoc>
		<name>LoginBuddyResponseEvent</name>
		<type>com.marcelmika.lims.api.events.buddy.LoginBuddyResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>loginFailure</name>
			<comment><![CDATA[Factory method which creates new success response object]]></comment>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[textual description of the success]]></comment>
			</param>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<required>true</required>
				<comment><![CDATA[related to the event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[BuddyLoginResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>loginSuccess</name>
			<comment><![CDATA[Factory method which creates new failure response object]]></comment>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[textual description of the failure]]></comment>
			</param>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<required>true</required>
				<comment><![CDATA[related to the event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[BuddyLoginResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>getDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>details</name>
		</field>
	</javadoc>
	<javadoc>
		<name>LogoutBuddyRequestEvent</name>
		<type>com.marcelmika.lims.api.events.buddy.LogoutBuddyRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>LogoutBuddyRequestEvent</name>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>details</name>
		</field>
	</javadoc>
	<javadoc>
		<name>LogoutBuddyResponseEvent</name>
		<type>com.marcelmika.lims.api.events.buddy.LogoutBuddyResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>logoutFailure</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>logoutSuccess</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>details</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ReadPresenceBuddyRequestEvent</name>
		<type>com.marcelmika.lims.api.events.buddy.ReadPresenceBuddyRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>ReadPresenceBuddyRequestEvent</name>
			<param>
				<name>buddyDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ReadPresenceBuddyResponseEvent</name>
		<type>com.marcelmika.lims.api.events.buddy.ReadPresenceBuddyResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>readPresenceSuccess</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>presenceDetails</name>
				<type>com.marcelmika.lims.api.entity.PresenceDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>readPresenceFailure</name>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getPresenceDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>presenceDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>UpdatePresenceBuddyRequestEvent</name>
		<type>com.marcelmika.lims.api.events.buddy.UpdatePresenceBuddyRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>UpdatePresenceBuddyRequestEvent</name>
			<param>
				<name>buddyId</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>presenceDetails</name>
				<type>com.marcelmika.lims.api.entity.PresenceDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getPresenceDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyId</name>
		</field>
		<field>
			<name>presenceDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>UpdatePresenceBuddyResponseEvent</name>
		<type>com.marcelmika.lims.api.events.buddy.UpdatePresenceBuddyResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>updatePresenceSuccess</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>updatePresenceFailure</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>AddBuddiesRequestEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.AddBuddiesRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>AddBuddiesRequestEvent</name>
			<param>
				<name>buddyCollectionDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyCollectionDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversationDetails</name>
				<type>com.marcelmika.lims.api.entity.ConversationDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyCollectionDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyCollectionDetails</name>
		</field>
		<field>
			<name>conversationDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>AddBuddiesResponseEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.AddBuddiesResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>addBuddiesSuccess</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>addBuddiesFailure</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>CloseConversationRequestEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.CloseConversationRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>CloseConversationRequestEvent</name>
			<param>
				<name>buddyId</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyId</name>
		</field>
		<field>
			<name>conversationId</name>
		</field>
	</javadoc>
	<javadoc>
		<name>CloseConversationResponseEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.CloseConversationResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>CloseConversationResponseEvent</name>
			<comment><![CDATA[Constructor is private. Use factory methods to create new success or failure instances]]></comment>
		</method>
		<method>
			<name>success</name>
			<comment><![CDATA[Factory method for success status]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>failure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.CloseConversationResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>failure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.CloseConversationResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<required>true</required>
				<comment><![CDATA[Exception]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>getStatus</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>status</name>
		</field>
	</javadoc>
	<javadoc>
		<name>CreateConversationRequestEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.CreateConversationRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>CreateConversationRequestEvent</name>
			<param>
				<name>creator</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.api.entity.ConversationDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>initialMessage</name>
				<type>com.marcelmika.lims.api.entity.MessageDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getCreator</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversation</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getInitialMessage</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>creator</name>
		</field>
		<field>
			<name>conversation</name>
		</field>
		<field>
			<name>initialMessage</name>
		</field>
	</javadoc>
	<javadoc>
		<name>CreateConversationResponseEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.CreateConversationResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>CreateConversationResponseEvent</name>
			<comment><![CDATA[Constructor is private. Use factory methods to create new success or failure instances]]></comment>
		</method>
		<method>
			<name>createConversationSuccess</name>
			<comment><![CDATA[Factory method for success status]]></comment>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.api.entity.ConversationDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>createConversationFailure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.CreateConversationResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>createConversationFailure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.CreateConversationResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<required>true</required>
				<comment><![CDATA[Exception]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>getStatus</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversation</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>conversation</name>
		</field>
		<field>
			<name>status</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GetConversationsRequestEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.GetConversationsRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>GetConversationsRequestEvent</name>
			<param>
				<name>buddyDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GetConversationsResponseEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.GetConversationsResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getConversationsSuccess</name>
			<param>
				<name>conversations</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationsFailure</name>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversations</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>conversations</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GetOpenedConversationsRequestEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.GetOpenedConversationsRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>GetOpenedConversationsRequestEvent</name>
			<param>
				<name>buddyDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GetOpenedConversationsResponseEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.GetOpenedConversationsResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>GetOpenedConversationsResponseEvent</name>
			<comment><![CDATA[Constructor is private. Use factory methods to create new success or failure instances]]></comment>
		</method>
		<method>
			<name>success</name>
			<comment><![CDATA[Factory method for success status]]></comment>
			<param>
				<name>conversations</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>failure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.GetOpenedConversationsResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>failure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.GetOpenedConversationsResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<required>true</required>
				<comment><![CDATA[Exception]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>getStatus</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>status</name>
		</field>
		<field>
			<name>conversationDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>LeaveConversationRequestEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.LeaveConversationRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>LeaveConversationRequestEvent</name>
			<param>
				<name>buddyId</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyId</name>
		</field>
		<field>
			<name>conversationId</name>
		</field>
	</javadoc>
	<javadoc>
		<name>LeaveConversationResponseEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.LeaveConversationResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>leaveConversationSuccess</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>leaveConversationFailure</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>OpenConversationRequestEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.OpenConversationRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>OpenConversationRequestEvent</name>
			<param>
				<name>buddyId</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyId</name>
		</field>
		<field>
			<name>conversationId</name>
		</field>
	</javadoc>
	<javadoc>
		<name>OpenConversationResponseEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.OpenConversationResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>OpenConversationResponseEvent</name>
			<comment><![CDATA[Constructor is private. Use factory methods to create new success or failure instances]]></comment>
		</method>
		<method>
			<name>success</name>
			<comment><![CDATA[Factory method for success status]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>failure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.OpenConversationResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>failure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.OpenConversationResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<required>true</required>
				<comment><![CDATA[Exception]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>getStatus</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>status</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ReadSingleUserConversationRequestEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.ReadSingleUserConversationRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>ReadSingleUserConversationRequestEvent</name>
			<param>
				<name>participant</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.api.entity.ConversationDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>pagination</name>
				<type>com.marcelmika.lims.api.entity.PaginationDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getParticipant</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversation</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getPagination</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>participant</name>
		</field>
		<field>
			<name>conversation</name>
		</field>
		<field>
			<name>pagination</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ReadSingleUserConversationResponseEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.ReadSingleUserConversationResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>ReadSingleUserConversationResponseEvent</name>
			<comment><![CDATA[Constructor is private. Use factory methods to create new success or failure instances]]></comment>
		</method>
		<method>
			<name>readConversationSuccess</name>
			<comment><![CDATA[Factory method for success status]]></comment>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.api.entity.ConversationDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>readConversationFailure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.ReadSingleUserConversationResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>readConversationFailure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.ReadSingleUserConversationResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<required>true</required>
				<comment><![CDATA[Exception]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>getStatus</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversation</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>status</name>
		</field>
		<field>
			<name>conversation</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ResetUnreadMessagesCounterRequestEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.ResetUnreadMessagesCounterRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>ResetUnreadMessagesCounterRequestEvent</name>
			<param>
				<name>buddyId</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyId</name>
		</field>
		<field>
			<name>conversationId</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ResetUnreadMessagesCounterResponseEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.ResetUnreadMessagesCounterResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>ResetUnreadMessagesCounterResponseEvent</name>
			<comment><![CDATA[Constructor is private. Use factory methods to create new success or failure instances]]></comment>
		</method>
		<method>
			<name>success</name>
			<comment><![CDATA[Factory method for success status]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>failure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.ResetUnreadMessagesCounterResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>failure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.ResetUnreadMessagesCounterResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<required>true</required>
				<comment><![CDATA[Exception]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>getStatus</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>status</name>
		</field>
	</javadoc>
	<javadoc>
		<name>SendMessageRequestEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.SendMessageRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>SendMessageRequestEvent</name>
			<param>
				<name>buddyDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversationDetails</name>
				<type>com.marcelmika.lims.api.entity.ConversationDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>messageDetails</name>
				<type>com.marcelmika.lims.api.entity.MessageDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getMessageDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyDetails</name>
		</field>
		<field>
			<name>conversationDetails</name>
		</field>
		<field>
			<name>messageDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>SendMessageResponseEvent</name>
		<type>com.marcelmika.lims.api.events.conversation.SendMessageResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>SendMessageResponseEvent</name>
			<comment><![CDATA[Constructor is private. Use factory methods to create new success or failure instances]]></comment>
		</method>
		<method>
			<name>sendMessageSuccess</name>
			<comment><![CDATA[Factory method for success status]]></comment>
			<param>
				<name>message</name>
				<type>com.marcelmika.lims.api.entity.MessageDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>sendMessageFailure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.SendMessageResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>sendMessageFailure</name>
			<comment><![CDATA[Factory method for failure status]]></comment>
			<param>
				<name>status</name>
				<type>com.marcelmika.lims.api.events.conversation.SendMessageResponseEvent.Status</type>
				<required>true</required>
				<comment><![CDATA[Status]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<required>true</required>
				<comment><![CDATA[Exception]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>getStatus</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getMessage</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>status</name>
		</field>
		<field>
			<name>message</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GetGroupsRequestEvent</name>
		<type>com.marcelmika.lims.api.events.group.GetGroupsRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>GetGroupsRequestEvent</name>
			<param>
				<name>buddyDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GetGroupsResponseEvent</name>
		<type>com.marcelmika.lims.api.events.group.GetGroupsResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getGroupsSuccess</name>
			<param>
				<name>groupCollectionDetails</name>
				<type>com.marcelmika.lims.api.entity.GroupCollectionDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getGroupsFailure</name>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getGroupCollection</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>groupCollection</name>
		</field>
	</javadoc>
	<javadoc>
		<name>DisableChatRequestEvent</name>
		<type>com.marcelmika.lims.api.events.settings.DisableChatRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>DisableChatRequestEvent</name>
			<param>
				<name>buddyDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>DisableChatResponseEvent</name>
		<type>com.marcelmika.lims.api.events.settings.DisableChatResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>disableChatSuccess</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>disableChatFailure</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>EnableChatRequestEvent</name>
		<type>com.marcelmika.lims.api.events.settings.EnableChatRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>EnableChatRequestEvent</name>
			<param>
				<name>buddyDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>EnableChatResponseEvent</name>
		<type>com.marcelmika.lims.api.events.settings.EnableChatResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>enableChatSuccess</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>enableChatFailure</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>ReadSettingsRequestEvent</name>
		<type>com.marcelmika.lims.api.events.settings.ReadSettingsRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>ReadSettingsRequestEvent</name>
			<param>
				<name>buddyDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ReadSettingsResponseEvent</name>
		<type>com.marcelmika.lims.api.events.settings.ReadSettingsResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>readSettingsSuccess</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>settingsDetails</name>
				<type>com.marcelmika.lims.api.entity.SettingsDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>readSettingsFailure</name>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getSettingsDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>settingsDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>UpdateActivePanelRequestEvent</name>
		<type>com.marcelmika.lims.api.events.settings.UpdateActivePanelRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>UpdateActivePanelRequestEvent</name>
			<param>
				<name>buddyId</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>activePanel</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getActivePanel</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyId</name>
		</field>
		<field>
			<name>activePanel</name>
		</field>
	</javadoc>
	<javadoc>
		<name>UpdateActivePanelResponseEvent</name>
		<type>com.marcelmika.lims.api.events.settings.UpdateActivePanelResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>updateActivePanelFailure</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>updateActivePanelSuccess</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>UpdateSettingsRequestEvent</name>
		<type>com.marcelmika.lims.api.events.settings.UpdateSettingsRequestEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>UpdateSettingsRequestEvent</name>
			<param>
				<name>buddyId</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>settingsDetails</name>
				<type>com.marcelmika.lims.api.entity.SettingsDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getSettingsDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>buddyId</name>
		</field>
		<field>
			<name>settingsDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>UpdateSettingsResponseEvent</name>
		<type>com.marcelmika.lims.api.events.settings.UpdateSettingsResponseEvent</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>updateSettingsFailure</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>settingsDetails</name>
				<type>com.marcelmika.lims.api.entity.SettingsDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>exception</name>
				<type>java.lang.Throwable</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>updateSettingsSuccess</name>
			<param>
				<name>result</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>settingsDetails</name>
				<type>com.marcelmika.lims.api.entity.SettingsDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getSettingsDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>settingsDetails</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Buddy</name>
		<type>com.marcelmika.lims.core.domain.Buddy</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromBuddyDetails</name>
			<comment><![CDATA[Create new user and maps data from user details]]></comment>
			<param>
				<name>buddyDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<required>true</required>
				<comment><![CDATA[BuddyDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[User]]></comment>
			</return>
		</method>
		<method>
			<name>toBuddyDetails</name>
			<comment><![CDATA[Maps user to user details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[UserDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBuddyId</name>
			<param>
				<name>buddyId</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getFullName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFullName</name>
			<param>
				<name>fullName</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getScreenName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setScreenName</name>
			<param>
				<name>screenName</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getPassword</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPassword</name>
			<param>
				<name>password</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getSettings</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setSettings</name>
			<param>
				<name>settings</name>
				<type>Settings</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getPresence</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPresence</name>
			<param>
				<name>presence</name>
				<type>Presence</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>buddyId</name>
		</field>
		<field>
			<name>fullName</name>
		</field>
		<field>
			<name>screenName</name>
		</field>
		<field>
			<name>password</name>
		</field>
		<field>
			<name>settings</name>
		</field>
		<field>
			<name>presence</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Conversation</name>
		<type>com.marcelmika.lims.core.domain.Conversation</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromConversationDetails</name>
			<comment><![CDATA[Factory method which creates new Conversation from the ConversationDetails]]></comment>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.ConversationDetails</type>
				<required>true</required>
				<comment><![CDATA[ConversationDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Conversation]]></comment>
			</return>
		</method>
		<method>
			<name>toConversationDetails</name>
			<comment><![CDATA[Maps conversation to conversation details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[ConversationDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationId</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getParticipants</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setParticipants</name>
			<param>
				<name>participants</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>addParticipant</name>
			<param>
				<name>participant</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getMessages</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMessages</name>
			<param>
				<name>messages</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getConversationType</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationType</name>
			<param>
				<name>conversationType</name>
				<type>ConversationType</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getUnreadMessagesCount</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setUnreadMessagesCount</name>
			<param>
				<name>unreadMessagesCount</name>
				<type>java.lang.Integer</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddy</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBuddy</name>
			<param>
				<name>buddy</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getUpdatedAt</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setUpdatedAt</name>
			<param>
				<name>updatedAt</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>conversationId</name>
		</field>
		<field>
			<name>conversationType</name>
		</field>
		<field>
			<name>unreadMessagesCount</name>
		</field>
		<field>
			<name>buddy</name>
		</field>
		<field>
			<name>participants</name>
		</field>
		<field>
			<name>messages</name>
		</field>
		<field>
			<name>updatedAt</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConversationType</name>
		<type>com.marcelmika.lims.core.domain.ConversationType</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
	</javadoc>
	<javadoc>
		<name>Message</name>
		<type>com.marcelmika.lims.core.domain.Message</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromMessageDetails</name>
			<comment><![CDATA[Creates new Message and maps data from Message details]]></comment>
			<param>
				<name>messageDetails</name>
				<type>com.marcelmika.lims.api.entity.MessageDetails</type>
				<required>true</required>
				<comment><![CDATA[MessageDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Message]]></comment>
			</return>
		</method>
		<method>
			<name>toMessageDetails</name>
			<comment><![CDATA[Maps message to message details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[MessageDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getFrom</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFrom</name>
			<param>
				<name>from</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getCreatedAt</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setCreatedAt</name>
			<param>
				<name>createdAt</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBody</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBody</name>
			<param>
				<name>body</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>from</name>
		</field>
		<field>
			<name>createdAt</name>
		</field>
		<field>
			<name>body</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Presence</name>
		<type>com.marcelmika.lims.core.domain.Presence</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromPresenceDetails</name>
			<comment><![CDATA[Factory method which creates new Presence from PresenceDetails]]></comment>
			<param>
				<name>presenceDetails</name>
				<type>com.marcelmika.lims.api.entity.PresenceDetails</type>
				<required>true</required>
				<comment><![CDATA[PresenceDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Presence]]></comment>
			</return>
		</method>
		<method>
			<name>toPresenceDetails</name>
			<comment><![CDATA[Maps Presence to PresenceDetails]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[PresenceDetails]]></comment>
			</return>
		</method>
		<method>
			<name>Presence</name>
			<param>
				<name>code</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getCode</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>STATE_ACTIVE</name>
		</field>
		<field>
			<name>STATE_AWAY</name>
		</field>
		<field>
			<name>STATE_DND</name>
		</field>
		<field>
			<name>STATE_OFFLINE</name>
		</field>
		<field>
			<name>STATE_UNRECOGNIZED</name>
		</field>
		<field>
			<name>code</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Settings</name>
		<type>com.marcelmika.lims.core.domain.Settings</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromSettingsDetails</name>
			<comment><![CDATA[Create new settings and maps data from settings details]]></comment>
			<param>
				<name>settingsDetails</name>
				<type>com.marcelmika.lims.api.entity.SettingsDetails</type>
				<required>true</required>
				<comment><![CDATA[SettingsDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Settings]]></comment>
			</return>
		</method>
		<method>
			<name>toSettingsDetails</name>
			<comment><![CDATA[Maps settings to settings details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[SettingsDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getActivePanelId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setActivePanelId</name>
			<param>
				<name>activePanelId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>isMute</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMute</name>
			<param>
				<name>isMute</name>
				<type>boolean</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>isChatEnabled</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setChatEnabled</name>
			<param>
				<name>isChatEnabled</name>
				<type>boolean</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>presence</name>
		</field>
		<field>
			<name>activePanelId</name>
		</field>
		<field>
			<name>isMute</name>
		</field>
		<field>
			<name>isChatEnabled</name>
		</field>
	</javadoc>
	<javadoc>
		<name>BuddyCoreService</name>
		<type>com.marcelmika.lims.core.service.BuddyCoreService</type>
		<comment><![CDATA[Serves as a port to the business logic related to buddy.]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>loginBuddy</name>
			<comment><![CDATA[Login buddy to System]]></comment>
			<param>
				<name>event</name>
				<type>LoginBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for login method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for login method]]></comment>
			</return>
		</method>
		<method>
			<name>logoutBuddy</name>
			<comment><![CDATA[Logout buddy from System]]></comment>
			<param>
				<name>event</name>
				<type>LogoutBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>removeBuddy</name>
			<comment><![CDATA[Completely removes buddy from the System]]></comment>
			<param>
				<name>event</name>
				<type>DeleteBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>updatePresence</name>
			<comment><![CDATA[Update buddy's presence]]></comment>
			<param>
				<name>event</name>
				<type>UpdatePresenceBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>BuddyCoreServiceImpl</name>
		<type>com.marcelmika.lims.core.service.BuddyCoreServiceImpl</type>
		<comment><![CDATA[Implementation of BuddyCoreService]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>BuddyCoreServiceImpl</name>
			<comment><![CDATA[Constructor]]></comment>
			<param>
				<name>buddyJabberService</name>
				<type>com.marcelmika.lims.jabber.service.BuddyJabberService</type>
				<required>true</required>
				<comment><![CDATA[jabber service]]></comment>
			</param>
			<param>
				<name>buddyPersistenceService</name>
				<type>com.marcelmika.lims.persistence.service.BuddyPersistenceService</type>
				<required>true</required>
				<comment><![CDATA[persistence service]]></comment>
			</param>
		</method>
		<method>
			<name>loginBuddy</name>
			<comment><![CDATA[Login buddy to System]]></comment>
			<param>
				<name>event</name>
				<type>LoginBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for login method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for login method]]></comment>
			</return>
		</method>
		<method>
			<name>logoutBuddy</name>
			<comment><![CDATA[Logout buddy from System]]></comment>
			<param>
				<name>event</name>
				<type>LogoutBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>removeBuddy</name>
			<comment><![CDATA[Completely removes buddy from the System]]></comment>
			<param>
				<name>event</name>
				<type>DeleteBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>updatePresence</name>
			<comment><![CDATA[Change buddy's presence]]></comment>
			<param>
				<name>event</name>
				<type>UpdatePresenceBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>buddyJabberService</name>
		</field>
		<field>
			<name>buddyPersistenceService</name>
		</field>
	</javadoc>
	<javadoc>
		<name>BuddyCoreServiceUtil</name>
		<type>com.marcelmika.lims.core.service.BuddyCoreServiceUtil</type>
		<comment><![CDATA[Utility class that holds an instance of BuddyCoreService.]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getBuddyCoreService</name>
			<comment><![CDATA[Return Buddy Core Service implementation]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[BuddyCoreService]]></comment>
			</return>
		</method>
		<method>
			<name>setBuddyCoreService</name>
			<comment><![CDATA[Inject Buddy Core Service via Dependency Injection]]></comment>
			<param>
				<name>buddyCoreService</name>
				<type>BuddyCoreService</type>
				<required>true</required>
				<comment><![CDATA[BuddyCoreService]]></comment>
			</param>
		</method>
		<field>
			<name>buddyCoreService</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConversationCoreService</name>
		<type>com.marcelmika.lims.core.service.ConversationCoreService</type>
		<comment><![CDATA[Serves as a port to the business logic related to conversation.]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getConversations</name>
			<comment><![CDATA[Get all conversations related to the particular buddy]]></comment>
			<param>
				<name>event</name>
				<type>GetConversationsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
			<deprecated><![CDATA[]]></deprecated>
		</method>
		<method>
			<name>getOpenedConversations</name>
			<comment><![CDATA[Get all opened conversations related to the particular buddy]]></comment>
			<param>
				<name>event</name>
				<type>GetOpenedConversationsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<method>
			<name>createConversation</name>
			<comment><![CDATA[Creates new conversation]]></comment>
			<param>
				<name>event</name>
				<type>CreateConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<method>
			<name>readConversation</name>
			<comment><![CDATA[Reads messages from conversation]]></comment>
			<param>
				<name>event</name>
				<type>ReadSingleUserConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>openConversation</name>
			<comment><![CDATA[Opens existing conversation]]></comment>
			<param>
				<name>event</name>
				<type>OpenConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
			<deprecated><![CDATA[]]></deprecated>
		</method>
		<method>
			<name>closeConversation</name>
			<comment><![CDATA[Closes existing conversation. User remains in the conversation though.]]></comment>
			<param>
				<name>event</name>
				<type>CloseConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>resetUnreadMessagesCounter</name>
			<comment><![CDATA[Reset counter of unread messages (usually displayed in badge) for the particular user and conversation]]></comment>
			<param>
				<name>event</name>
				<type>ResetUnreadMessagesCounterRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>leaveConversation</name>
			<comment><![CDATA[Removes buddy from the conversation]]></comment>
			<param>
				<name>event</name>
				<type>LeaveConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
			<deprecated><![CDATA[]]></deprecated>
		</method>
		<method>
			<name>addBuddies</name>
			<comment><![CDATA[Adds buddies to the conversation]]></comment>
			<param>
				<name>event</name>
				<type>AddBuddiesRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
			<deprecated><![CDATA[]]></deprecated>
		</method>
		<method>
			<name>sendMessage</name>
			<comment><![CDATA[Sends message to conversation]]></comment>
			<param>
				<name>event</name>
				<type>SendMessageRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>ConversationCoreServiceImpl</name>
		<type>com.marcelmika.lims.core.service.ConversationCoreServiceImpl</type>
		<comment><![CDATA[Implementation of ConversationCoreService]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>ConversationCoreServiceImpl</name>
			<comment><![CDATA[Constructor]]></comment>
			<param>
				<name>conversationJabberService</name>
				<type>com.marcelmika.lims.jabber.service.ConversationJabberService</type>
				<required>true</required>
				<comment><![CDATA[jabber service]]></comment>
			</param>
			<param>
				<name>conversationPersistenceService</name>
				<type>com.marcelmika.lims.persistence.service.ConversationPersistenceService</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getConversations</name>
			<comment><![CDATA[Get all conversations related to the particular buddy]]></comment>
			<param>
				<name>event</name>
				<type>GetConversationsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<method>
			<name>getOpenedConversations</name>
			<comment><![CDATA[Get all opened conversations related to the particular buddy]]></comment>
			<param>
				<name>event</name>
				<type>GetOpenedConversationsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<method>
			<name>createConversation</name>
			<comment><![CDATA[Creates new conversation]]></comment>
			<param>
				<name>event</name>
				<type>CreateConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for login method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for login method]]></comment>
			</return>
		</method>
		<method>
			<name>readConversation</name>
			<comment><![CDATA[Reads messages from conversation]]></comment>
			<param>
				<name>event</name>
				<type>ReadSingleUserConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>openConversation</name>
			<comment><![CDATA[Opens existing conversation]]></comment>
			<param>
				<name>event</name>
				<type>OpenConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for login method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for login method]]></comment>
			</return>
		</method>
		<method>
			<name>closeConversation</name>
			<comment><![CDATA[Closes existing conversation. User remains in the conversation though.]]></comment>
			<param>
				<name>event</name>
				<type>CloseConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for login method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for login method]]></comment>
			</return>
		</method>
		<method>
			<name>resetUnreadMessagesCounter</name>
			<comment><![CDATA[Reset counter of unread messages (usually displayed in badge) for the particular user and conversation]]></comment>
			<param>
				<name>event</name>
				<type>ResetUnreadMessagesCounterRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>leaveConversation</name>
			<comment><![CDATA[Removes buddy from the conversation]]></comment>
			<param>
				<name>event</name>
				<type>LeaveConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for login method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for login method]]></comment>
			</return>
		</method>
		<method>
			<name>addBuddies</name>
			<comment><![CDATA[Adds buddies to the conversation]]></comment>
			<param>
				<name>event</name>
				<type>AddBuddiesRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>sendMessage</name>
			<comment><![CDATA[Sends message to conversation]]></comment>
			<param>
				<name>event</name>
				<type>SendMessageRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<field>
			<name>conversationJabberService</name>
		</field>
		<field>
			<name>conversationPersistenceService</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConversationCoreServiceUtil</name>
		<type>com.marcelmika.lims.core.service.ConversationCoreServiceUtil</type>
		<comment><![CDATA[Utility class that holds an instance of ConversationCoreService.]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getConversationCoreService</name>
			<comment><![CDATA[Returns ConversationCoreService implementation]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[ConversationCoreService]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationCoreService</name>
			<comment><![CDATA[Injects proper ConversationCoreService via Dependency Injection]]></comment>
			<param>
				<name>conversationCoreService</name>
				<type>ConversationCoreService</type>
				<required>true</required>
				<comment><![CDATA[ConversationCoreService]]></comment>
			</param>
		</method>
		<field>
			<name>conversationCoreService</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GroupCoreService</name>
		<type>com.marcelmika.lims.core.service.GroupCoreService</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getGroups</name>
			<comment><![CDATA[Get all groups related to the particular user]]></comment>
			<param>
				<name>event</name>
				<type>com.marcelmika.lims.api.events.group.GetGroupsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>GroupCoreServiceImpl</name>
		<type>com.marcelmika.lims.core.service.GroupCoreServiceImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>GroupCoreServiceImpl</name>
			<comment><![CDATA[Constructor]]></comment>
			<param>
				<name>groupJabberService</name>
				<type>com.marcelmika.lims.jabber.service.GroupJabberService</type>
				<required>true</required>
				<comment><![CDATA[jabber service]]></comment>
			</param>
			<param>
				<name>groupPersistenceService</name>
				<type>com.marcelmika.lims.persistence.service.GroupPersistenceService</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getGroups</name>
			<comment><![CDATA[Get all groups related to the particular user]]></comment>
			<param>
				<name>event</name>
				<type>com.marcelmika.lims.api.events.group.GetGroupsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<field>
			<name>groupJabberService</name>
		</field>
		<field>
			<name>groupPersistenceService</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GroupCoreServiceUtil</name>
		<type>com.marcelmika.lims.core.service.GroupCoreServiceUtil</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getGroupCoreService</name>
			<comment><![CDATA[Returns GroupCoreService implementation]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[GroupCoreService]]></comment>
			</return>
		</method>
		<method>
			<name>setGroupCoreService</name>
			<comment><![CDATA[Injects proper GroupCoreService via Dependency Injection]]></comment>
			<param>
				<name>groupCoreService</name>
				<type>GroupCoreService</type>
				<required>true</required>
				<comment><![CDATA[GroupCoreService]]></comment>
			</param>
		</method>
		<field>
			<name>groupCoreService</name>
		</field>
	</javadoc>
	<javadoc>
		<name>SettingsCoreService</name>
		<type>com.marcelmika.lims.core.service.SettingsCoreService</type>
		<comment><![CDATA[Several settings values are related to each buddy. Those values can be changed via SettingsCoreService that serves as a port to the business logic related to settings.]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>readSettings</name>
			<comment><![CDATA[Reads buddy's settings]]></comment>
			<param>
				<name>event</name>
				<type>ReadSettingsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event]]></comment>
			</return>
		</method>
		<method>
			<name>updateActivePanel</name>
			<comment><![CDATA[Update buddy's active panel (panel which is open)]]></comment>
			<param>
				<name>event</name>
				<type>UpdateActivePanelRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event]]></comment>
			</return>
		</method>
		<method>
			<name>updateSettings</name>
			<comment><![CDATA[Update buddy's settings]]></comment>
			<param>
				<name>event</name>
				<type>UpdateSettingsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event]]></comment>
			</return>
		</method>
		<method>
			<name>enableChat</name>
			<comment><![CDATA[Enables chat for buddy]]></comment>
			<param>
				<name>event</name>
				<type>EnableChatRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event]]></comment>
			</return>
		</method>
		<method>
			<name>disableChat</name>
			<comment><![CDATA[Disables chat for buddy]]></comment>
			<param>
				<name>event</name>
				<type>DisableChatRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>SettingsCoreServiceImpl</name>
		<type>com.marcelmika.lims.core.service.SettingsCoreServiceImpl</type>
		<comment><![CDATA[Implementation of SettingsCoreService]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>SettingsCoreServiceImpl</name>
			<comment><![CDATA[Constructor]]></comment>
			<param>
				<name>settingsPersistenceService</name>
				<type>com.marcelmika.lims.persistence.service.SettingsPersistenceService</type>
				<required>true</required>
				<comment><![CDATA[persistence service]]></comment>
			</param>
		</method>
		<method>
			<name>readSettings</name>
			<comment><![CDATA[Reads buddy's settings]]></comment>
			<param>
				<name>event</name>
				<type>ReadSettingsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event]]></comment>
			</return>
		</method>
		<method>
			<name>updateActivePanel</name>
			<comment><![CDATA[Change buddy's presence]]></comment>
			<param>
				<name>event</name>
				<type>UpdateActivePanelRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>updateSettings</name>
			<comment><![CDATA[Update buddy's settings]]></comment>
			<param>
				<name>event</name>
				<type>UpdateSettingsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>enableChat</name>
			<comment><![CDATA[Enables chat for buddy]]></comment>
			<param>
				<name>event</name>
				<type>EnableChatRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>disableChat</name>
			<comment><![CDATA[Disables chat for buddy]]></comment>
			<param>
				<name>event</name>
				<type>DisableChatRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<field>
			<name>settingsPersistenceService</name>
		</field>
	</javadoc>
	<javadoc>
		<name>SettingsCoreServiceUtil</name>
		<type>com.marcelmika.lims.core.service.SettingsCoreServiceUtil</type>
		<comment><![CDATA[Utility class that holds an instance of SettingsCoreService.]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getSettingsCoreService</name>
			<comment><![CDATA[Returns SettingsCoreService implementation]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[SettingsCoreService]]></comment>
			</return>
		</method>
		<method>
			<name>setSettingsCoreService</name>
			<comment><![CDATA[Injects proper SettingsCoreService via Dependency Injection]]></comment>
			<param>
				<name>settingsCoreService</name>
				<type>SettingsCoreService</type>
				<required>true</required>
				<comment><![CDATA[SettingsCoreService]]></comment>
			</param>
		</method>
		<field>
			<name>settingsCoreService</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Jabber</name>
		<type>com.marcelmika.lims.jabber.Jabber</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>sendMessage</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.jabber.domain.Conversation</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>message</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>connection</name>
				<type>org.jivesoftware.smack.Connection</type>
				<comment><![CDATA[]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>changeStatus</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>status</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>connection</name>
				<type>org.jivesoftware.smack.Connection</type>
				<comment><![CDATA[]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getConversation</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
			<deprecated><![CDATA[This will be moved to conversation store]]></deprecated>
		</method>
		<method>
			<name>getAllConversations</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
			<deprecated><![CDATA[This will be moved to conversation store]]></deprecated>
		</method>
		<method>
			<name>leaveConversation</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>connection</name>
				<type>org.jivesoftware.smack.Connection</type>
				<comment><![CDATA[]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>restartConversations</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getResource</name>
			<param>
				<name>jabberId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getScreenName</name>
			<param>
				<name>jabberId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getFullRoomId</name>
			<param>
				<name>roomJID</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>JabberException</name>
		<type>com.marcelmika.lims.jabber.JabberException</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>JabberException</name>
			<comment><![CDATA[Creates a new instance of <code>JabberException</code> without detail message.]]></comment>
		</method>
		<method>
			<name>JabberException</name>
			<comment><![CDATA[Constructs an instance of <code>JabberException</code> with the specified detail message.]]></comment>
			<param>
				<name>msg</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[the detail message.]]></comment>
			</param>
		</method>
		<method>
			<name>JabberException</name>
			<comment><![CDATA[Constructs a new exception with the specified cause and a detail message of <tt>(cause==null ? null : cause.toString())</tt> (which typically contains the class and detail message of <tt>cause</tt>). This constructor is useful for exceptions that are little more than wrappers for other throwables (for example, {@link java.security.PrivilegedActionException}).]]></comment>
			<param>
				<name>cause</name>
				<type>java.lang.Throwable</type>
				<required>true</required>
				<comment><![CDATA[the cause (which is saved for later retrieval by the {@link #getCause()} method).  (A <tt>null</tt> value is permitted, and indicates that the cause is nonexistent or unknown.)]]></comment>
			</param>
			<since><![CDATA[1.4]]></since>
		</method>
		<method>
			<name>JabberException</name>
			<comment><![CDATA[Constructs a new exception with the specified detail message and cause. <p>Note that the detail message associated with {@code cause} is <i>not</i> automatically incorporated in this exception's detail message.]]></comment>
			<param>
				<name>message</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[the detail message (which is saved for later retrieval by the {@link #getMessage()} method).]]></comment>
			</param>
			<param>
				<name>cause</name>
				<type>java.lang.Throwable</type>
				<required>true</required>
				<comment><![CDATA[the cause (which is saved for later retrieval by the {@link #getCause()} method).  (A <tt>null</tt> value is permitted, and indicates that the cause is nonexistent or unknown.)]]></comment>
			</param>
			<since><![CDATA[1.4]]></since>
		</method>
	</javadoc>
	<javadoc>
		<name>JabberImpl</name>
		<type>com.marcelmika.lims.jabber.JabberImpl</type>
		<comment><![CDATA[Jabber server facade]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
	</javadoc>
	<javadoc>
		<name>JabberKeys</name>
		<type>com.marcelmika.lims.jabber.JabberKeys</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<field>
			<name>JABBER_STATUS_ONLINE</name>
		</field>
		<field>
			<name>JABBER_STATUS_BUSY</name>
		</field>
		<field>
			<name>JABBER_STATUS_UNAVAILABLE</name>
		</field>
		<field>
			<name>JABBER_STATUS_INVISIBLE</name>
		</field>
		<field>
			<name>JABBER_STATUS_OFF</name>
		</field>
	</javadoc>
	<javadoc>
		<name>JabberMapper</name>
		<type>com.marcelmika.lims.jabber.JabberMapper</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>mapStatusToPresence</name>
			<comment><![CDATA[Maps internal chat status to Jabber presence]]></comment>
			<param>
				<name>status</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[String]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Mapped Presence]]></comment>
			</return>
			<throws>
				<name>JabberException</name>
				<type>JabberException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>mapPresenceToStatus</name>
			<param>
				<name>presence</name>
				<type>org.jivesoftware.smack.packet.Presence</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>JabberException</name>
				<type>JabberException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
	</javadoc>
	<javadoc>
		<name>JabberUtil</name>
		<type>com.marcelmika.lims.jabber.JabberUtil</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>getJabber</name>
			<comment><![CDATA[Return Jabber facade implementation]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[Jabber]]></comment>
			</return>
		</method>
		<method>
			<name>setJabber</name>
			<comment><![CDATA[Inject Jabber via Dependency Injection]]></comment>
			<param>
				<name>jabber</name>
				<type>Jabber</type>
				<required>true</required>
				<comment><![CDATA[Jabber]]></comment>
			</param>
		</method>
		<method>
			<name>sendMessage</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.jabber.domain.Conversation</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>message</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>changeStatus</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>status</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getConversations</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>leaveConversation</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getConversation</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>restartConversations</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getResource</name>
			<param>
				<name>jabberId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getScreenName</name>
			<param>
				<name>jabberId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getFullRoomId</name>
			<param>
				<name>roomJID</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>jabber</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConnectionManager</name>
		<type>com.marcelmika.lims.jabber.connection.manager.ConnectionManager</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>createConnection</name>
			<comment><![CDATA[Creates new connection with jabber server]]></comment>
			<throws>
				<name>com.marcelmika.lims.jabber.JabberException</name>
				<type>com.marcelmika.lims.jabber.JabberException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>login</name>
			<comment><![CDATA[Log user in with username and password]]></comment>
			<param>
				<name>username</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[String]]></comment>
			</param>
			<param>
				<name>password</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[String]]></comment>
			</param>
			<throws>
				<name>com.marcelmika.lims.jabber.JabberException</name>
				<type>com.marcelmika.lims.jabber.JabberException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>logout</name>
			<comment><![CDATA[Logout buddy]]></comment>
		</method>
		<method>
			<name>getConnection</name>
			<comment><![CDATA[Returns connection of the user]]></comment>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getRoster</name>
			<comment><![CDATA[Returns buddy's roster]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[Roster]]></comment>
			</return>
		</method>
		<method>
			<name>getChatManager</name>
			<comment><![CDATA[Returns buddy's chat manager]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[ChatManager]]></comment>
			</return>
		</method>
		<method>
			<name>setPresence</name>
			<comment><![CDATA[Set or updates buddy's presence]]></comment>
			<param>
				<name>presence</name>
				<type>org.jivesoftware.smack.packet.Presence</type>
				<required>true</required>
				<comment><![CDATA[Presence of the concrete buddy.]]></comment>
			</param>
		</method>
	</javadoc>
	<javadoc>
		<name>ConnectionManagerFactory</name>
		<type>com.marcelmika.lims.jabber.connection.manager.ConnectionManagerFactory</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>buildManager</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>ConnectionManagerImpl</name>
		<type>com.marcelmika.lims.jabber.connection.manager.ConnectionManagerImpl</type>
		<comment><![CDATA[Manages user's connection to the server]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>createConnection</name>
			<comment><![CDATA[Creates new connection with jabber server]]></comment>
			<throws>
				<name>com.marcelmika.lims.jabber.JabberException</name>
				<type>com.marcelmika.lims.jabber.JabberException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>login</name>
			<comment><![CDATA[Log user in with username and password]]></comment>
			<param>
				<name>username</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[String]]></comment>
			</param>
			<param>
				<name>password</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[String]]></comment>
			</param>
			<throws>
				<name>com.marcelmika.lims.jabber.JabberException</name>
				<type>com.marcelmika.lims.jabber.JabberException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>logout</name>
			<comment><![CDATA[Logout buddy]]></comment>
		</method>
		<method>
			<name>getConnection</name>
			<comment><![CDATA[Returns connection of the user]]></comment>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getRoster</name>
			<comment><![CDATA[Returns buddy's roster]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[Roster]]></comment>
			</return>
		</method>
		<method>
			<name>getChatManager</name>
			<comment><![CDATA[Returns buddy's chat manager]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[ChatManager]]></comment>
			</return>
		</method>
		<method>
			<name>setPresence</name>
			<comment><![CDATA[Set or updates buddy's presence]]></comment>
			<param>
				<name>presence</name>
				<type>org.jivesoftware.smack.packet.Presence</type>
				<required>true</required>
				<comment><![CDATA[Presence of the concrete buddy.]]></comment>
			</param>
		</method>
		<method>
			<name>connectionClosed</name>
		</method>
		<method>
			<name>connectionClosedOnError</name>
			<param>
				<name>e</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>reconnectingIn</name>
			<param>
				<name>i</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>reconnectionSuccessful</name>
		</method>
		<method>
			<name>reconnectionFailed</name>
			<param>
				<name>e</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getConnectionConfiguration</name>
			<comment><![CDATA[Returns Connection configuration. Sets proper values of the configuration if they are not set yet]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[ConnectionConfiguration]]></comment>
			</return>
		</method>
		<method>
			<name>toString</name>
			<comment><![CDATA[Returns a string representation of the object.]]></comment>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>connectionConfiguration</name>
		</field>
		<field>
			<name>connection</name>
		</field>
	</javadoc>
	<javadoc>
		<name>LiferaySaslMechanism</name>
		<type>com.marcelmika.lims.jabber.connection.sasl.LiferaySaslMechanism</type>
		<comment><![CDATA[Has to be overridden to repair bug in SASLPlainMechanism class from Smack]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>LiferaySaslMechanism</name>
			<param>
				<name>saslAuthentication</name>
				<type>org.jivesoftware.smack.SASLAuthentication</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>authenticate</name>
			<param>
				<name>username</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>host</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>password</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<throws>
				<name>IOException</name>
				<type>java.io.IOException</type>
				<comment><![CDATA[]]></comment>
			</throws>
			<throws>
				<name>org.jivesoftware.smack.XMPPException</name>
				<type>org.jivesoftware.smack.XMPPException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>authenticate</name>
			<throws>
				<name>IOException</name>
				<type>java.io.IOException</type>
				<comment><![CDATA[]]></comment>
			</throws>
			<throws>
				<name>org.jivesoftware.smack.XMPPException</name>
				<type>org.jivesoftware.smack.XMPPException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
	</javadoc>
	<javadoc>
		<name>ConversationContainer</name>
		<type>com.marcelmika.lims.jabber.conversation.ConversationContainer</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>addConversation</name>
			<comment><![CDATA[Adds conversation to the container. If the conversation is already in the container nothing happens]]></comment>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[conversation id]]></comment>
			</param>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.jabber.domain.Conversation</type>
				<required>true</required>
				<comment><![CDATA[conversation]]></comment>
			</param>
		</method>
		<method>
			<name>getConversation</name>
			<comment><![CDATA[Returns conversation based on its id]]></comment>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[conversation ID]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Conversation]]></comment>
			</return>
		</method>
		<method>
			<name>getAllConversations</name>
			<comment><![CDATA[Returns all conversations in the container]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[List<Conversation>]]></comment>
			</return>
		</method>
		<method>
			<name>removeConversation</name>
			<comment><![CDATA[Removes conversation from the container]]></comment>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[conversation ID]]></comment>
			</param>
		</method>
		<method>
			<name>restartConversations</name>
			<comment><![CDATA[Restarts all conversations in the container]]></comment>
		</method>
		<field>
			<name>conversations</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConversationKeys</name>
		<type>com.marcelmika.lims.jabber.conversation.ConversationKeys</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<field>
			<name>CONVERSATION_TYPE_MULTI_USER</name>
		</field>
		<field>
			<name>CONVERSATION_TYPE_SINGLE_USER</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConversationManager</name>
		<type>com.marcelmika.lims.jabber.conversation.ConversationManager</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
	</javadoc>
	<javadoc>
		<name>ConversationStore</name>
		<type>com.marcelmika.lims.jabber.conversation.ConversationStore</type>
		<comment><![CDATA[Singleton which stores all conversation containers within the application]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>ConversationStore</name>
		</method>
		<method>
			<name>getInstance</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationContainer</name>
			<comment><![CDATA[Returns conversation container which belongs to the particular user based on the userID]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[Liferay ID of the user]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ConversationContainer]]></comment>
			</return>
		</method>
		<method>
			<name>removeConversationContainer</name>
			<comment><![CDATA[Removes conversation container from the conversation store based on the userID]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[Liferay ID of the user]]></comment>
			</param>
		</method>
		<method>
			<name>putConversationContainer</name>
			<comment><![CDATA[Puts conversation container to the conversation store]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[Liferay ID of the user]]></comment>
			</param>
			<param>
				<name>container</name>
				<type>ConversationContainer</type>
				<required>true</required>
				<comment><![CDATA[Container which will be added to the conversation store]]></comment>
			</param>
		</method>
		<field>
			<name>conversationContainers</name>
		</field>
	</javadoc>
	<javadoc>
		<name>MultiUserConversationManager</name>
		<type>com.marcelmika.lims.jabber.conversation.manager.multi.MultiUserConversationManager</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>setConnection</name>
			<comment><![CDATA[Sets connection]]></comment>
			<param>
				<name>connection</name>
				<type>org.jivesoftware.smack.Connection</type>
				<required>true</required>
				<comment><![CDATA[Connection]]></comment>
			</param>
		</method>
	</javadoc>
	<javadoc>
		<name>MultiUserConversationManagerFactory</name>
		<type>com.marcelmika.lims.jabber.conversation.manager.multi.MultiUserConversationManagerFactory</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>buildManager</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>MultiUserConversationManagerImpl</name>
		<type>com.marcelmika.lims.jabber.conversation.manager.multi.MultiUserConversationManagerImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>setConnection</name>
			<comment><![CDATA[Sets connection]]></comment>
			<param>
				<name>connection</name>
				<type>org.jivesoftware.smack.Connection</type>
				<required>true</required>
				<comment><![CDATA[Connection]]></comment>
			</param>
		</method>
	</javadoc>
	<javadoc>
		<name>SingleUserConversationManager</name>
		<type>com.marcelmika.lims.jabber.conversation.manager.single.SingleUserConversationManager</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>setChatManager</name>
			<comment><![CDATA[Manage conversations from chat manager]]></comment>
			<param>
				<name>chatManager</name>
				<type>org.jivesoftware.smack.ChatManager</type>
				<required>true</required>
				<comment><![CDATA[ChatManager]]></comment>
			</param>
		</method>
		<method>
			<name>createConversation</name>
			<comment><![CDATA[Creates new single user chat conversation]]></comment>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.jabber.domain.SingleUserConversation</type>
				<required>true</required>
				<comment><![CDATA[SingleUserConversation]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>com.marcelmika.lims.jabber.JabberException</name>
				<type>com.marcelmika.lims.jabber.JabberException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getConversations</name>
			<comment><![CDATA[Returns a list of all conversations]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[SingleUserConversation list of conversations]]></comment>
			</return>
		</method>
		<method>
			<name>sendMessage</name>
			<comment><![CDATA[Sends message to conversation]]></comment>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.jabber.domain.SingleUserConversation</type>
				<required>true</required>
				<comment><![CDATA[SingleUserConversation]]></comment>
			</param>
			<param>
				<name>message</name>
				<type>com.marcelmika.lims.jabber.domain.Message</type>
				<required>true</required>
				<comment><![CDATA[Message]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>com.marcelmika.lims.jabber.JabberException</name>
				<type>com.marcelmika.lims.jabber.JabberException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
	</javadoc>
	<javadoc>
		<name>SingleUserConversationManagerFactory</name>
		<type>com.marcelmika.lims.jabber.conversation.manager.single.SingleUserConversationManagerFactory</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>buildManager</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>SingleUserConversationManagerImpl</name>
		<type>com.marcelmika.lims.jabber.conversation.manager.single.SingleUserConversationManagerImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>setChatManager</name>
			<comment><![CDATA[Manage conversations from chat manager]]></comment>
			<param>
				<name>chatManager</name>
				<type>org.jivesoftware.smack.ChatManager</type>
				<required>true</required>
				<comment><![CDATA[ChatManager]]></comment>
			</param>
		</method>
		<method>
			<name>createConversation</name>
			<comment><![CDATA[Creates new single user chat conversation]]></comment>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.jabber.domain.SingleUserConversation</type>
				<required>true</required>
				<comment><![CDATA[SingleUserConversation]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>com.marcelmika.lims.jabber.JabberException</name>
				<type>com.marcelmika.lims.jabber.JabberException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getConversations</name>
			<comment><![CDATA[Returns a list of all conversations]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[SingleUserConversation list of conversations]]></comment>
			</return>
		</method>
		<method>
			<name>sendMessage</name>
			<comment><![CDATA[Sends message to conversation]]></comment>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.jabber.domain.SingleUserConversation</type>
				<required>true</required>
				<comment><![CDATA[SingleUserConversation]]></comment>
			</param>
			<param>
				<name>message</name>
				<type>com.marcelmika.lims.jabber.domain.Message</type>
				<required>true</required>
				<comment><![CDATA[Message]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>com.marcelmika.lims.jabber.JabberException</name>
				<type>com.marcelmika.lims.jabber.JabberException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>chatCreated</name>
			<comment><![CDATA[Called when the chat was created]]></comment>
			<param>
				<name>chat</name>
				<type>org.jivesoftware.smack.Chat</type>
				<required>true</required>
				<comment><![CDATA[the chat that was created]]></comment>
			</param>
			<param>
				<name>createdLocally</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[true if the chat was created by the local user]]></comment>
			</param>
		</method>
		<method>
			<name>createConversation</name>
			<comment><![CDATA[Stores chat in the system]]></comment>
			<param>
				<name>chat</name>
				<type>org.jivesoftware.smack.Chat</type>
				<required>true</required>
				<comment><![CDATA[Chat]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[SingleUserConversation create conversation]]></comment>
			</return>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>chatManager</name>
		</field>
		<field>
			<name>chatMap</name>
		</field>
		<field>
			<name>conversationMap</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Buddy</name>
		<type>com.marcelmika.lims.jabber.domain.Buddy</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromRosterEntry</name>
			<comment><![CDATA[Create new Buddy from RosterEntry.]]></comment>
			<param>
				<name>rosterEntry</name>
				<type>org.jivesoftware.smack.RosterEntry</type>
				<required>true</required>
				<comment><![CDATA[Smack's RosterEntry.]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Buddy]]></comment>
			</return>
		</method>
		<method>
			<name>fromChat</name>
			<comment><![CDATA[Creates buddy from chat and roster]]></comment>
			<param>
				<name>chat</name>
				<type>org.jivesoftware.smack.Chat</type>
				<required>true</required>
				<comment><![CDATA[Chat]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Buddy]]></comment>
			</return>
		</method>
		<method>
			<name>fromSmackMessage</name>
			<param>
				<name>smackMessage</name>
				<type>org.jivesoftware.smack.packet.Message</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>fromBuddyDetails</name>
			<comment><![CDATA[Factory method which creates new list of Buddies from the list of BuddyDetails]]></comment>
			<param>
				<name>detailsList</name>
				<type>java.util.List</type>
				<required>true</required>
				<comment><![CDATA[list of buddy details]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[List<Buddy> of buddies]]></comment>
			</return>
		</method>
		<method>
			<name>fromBuddyDetails</name>
			<comment><![CDATA[Create new user and maps data from user details]]></comment>
			<param>
				<name>buddyDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<required>true</required>
				<comment><![CDATA[BuddyDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[User]]></comment>
			</return>
		</method>
		<method>
			<name>toBuddyDetails</name>
			<comment><![CDATA[Maps user to user details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[UserDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBuddyId</name>
			<param>
				<name>buddyId</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getFullName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFullName</name>
			<param>
				<name>fullName</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getScreenName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setScreenName</name>
			<param>
				<name>screenName</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getPassword</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPassword</name>
			<param>
				<name>password</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getPresence</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPresence</name>
			<param>
				<name>presence</name>
				<type>Presence</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>buddyId</name>
		</field>
		<field>
			<name>fullName</name>
		</field>
		<field>
			<name>screenName</name>
		</field>
		<field>
			<name>password</name>
		</field>
		<field>
			<name>presence</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Conversation</name>
		<type>com.marcelmika.lims.jabber.domain.Conversation</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationType</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationVisibility</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>restart</name>
		</method>
		<method>
			<name>getMessages</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getLastMessage</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getLastMessageSent</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setLastMessageSent</name>
			<param>
				<name>lastMessageSent</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getIndexOfLastMessage</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getUnreadMessages</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toJSON</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toFullJSON</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>ConversationType</name>
		<type>com.marcelmika.lims.jabber.domain.ConversationType</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromConversationTypeDetails</name>
			<comment><![CDATA[Factory method which creates new ConversationType from ConversationTypeDetails]]></comment>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.ConversationTypeDetails</type>
				<required>true</required>
				<comment><![CDATA[conversation type details]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ConversationType]]></comment>
			</return>
		</method>
		<method>
			<name>toConversationTypeDetails</name>
			<comment><![CDATA[Maps Presence to PresenceDetails]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[PresenceDetails]]></comment>
			</return>
		</method>
		<method>
			<name>ConversationType</name>
			<param>
				<name>code</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getCode</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>SINGLE_USER</name>
		</field>
		<field>
			<name>MULTI_USER</name>
		</field>
		<field>
			<name>UNRECOGNIZED</name>
		</field>
		<field>
			<name>code</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Group</name>
		<type>com.marcelmika.lims.jabber.domain.Group</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromGroupDetails</name>
			<comment><![CDATA[Create new group and maps data from group details]]></comment>
			<param>
				<name>groupDetails</name>
				<type>com.marcelmika.lims.api.entity.GroupDetails</type>
				<required>true</required>
				<comment><![CDATA[GroupDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Group]]></comment>
			</return>
		</method>
		<method>
			<name>toGroupDetails</name>
			<comment><![CDATA[Maps group to group details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[GroupDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddies</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>addBuddy</name>
			<param>
				<name>buddy</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setName</name>
			<param>
				<name>name</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<comment><![CDATA[String representation of the Group.]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[A String representation of the Group.]]></comment>
			</return>
		</method>
		<field>
			<name>name</name>
		</field>
		<field>
			<name>buddies</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GroupCollection</name>
		<type>com.marcelmika.lims.jabber.domain.GroupCollection</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>toGroupCollectionDetails</name>
			<comment><![CDATA[Maps a list of groups to a list of group details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[list of group details]]></comment>
			</return>
		</method>
		<method>
			<name>addGroups</name>
			<param>
				<name>groups</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getLastModified</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>lastModified</name>
		</field>
		<field>
			<name>groups</name>
		</field>
	</javadoc>
	<javadoc>
		<name>MUConversation</name>
		<type>com.marcelmika.lims.jabber.domain.MUConversation</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>MUConversation</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>owner</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>muc</name>
				<type>org.jivesoftware.smackx.muc.MultiUserChat</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>restart</name>
		</method>
		<method>
			<name>attachListeners</name>
			<param>
				<name>muc</name>
				<type>org.jivesoftware.smackx.muc.MultiUserChat</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>fetchOwners</name>
			<param>
				<name>muc</name>
				<type>org.jivesoftware.smackx.muc.MultiUserChat</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>join</name>
			<param>
				<name>muc</name>
				<type>org.jivesoftware.smackx.muc.MultiUserChat</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getParticipants</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>containsParticipant</name>
			<param>
				<name>participant</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>addParticipant</name>
			<param>
				<name>participant</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>addParticipants</name>
			<param>
				<name>participants</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getMessages</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getOwner</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationVisibility</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getLastMessage</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getLastMessageSent</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setLastMessageSent</name>
			<param>
				<name>lastMessageSent</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getIndexOfLastMessage</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getUnreadMessages</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getTitle</name>
			<comment><![CDATA[Returns conversation title. Adds count of other participants in conversation if there is more than one Returns empty string if there is no participant in the conversation]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[conversationTitle]]></comment>
			</return>
		</method>
		<method>
			<name>toJSON</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toFullJSON</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>conversationId</name>
		</field>
		<field>
			<name>muc</name>
		</field>
		<field>
			<name>history</name>
		</field>
		<field>
			<name>owner</name>
		</field>
		<field>
			<name>participants</name>
		</field>
		<field>
			<name>messages</name>
		</field>
		<field>
			<name>lastMessageSent</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Message</name>
		<type>com.marcelmika.lims.jabber.domain.Message</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromSmackMessage</name>
			<param>
				<name>smackMessage</name>
				<type>org.jivesoftware.smack.packet.Message</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>fromMessageDetails</name>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.MessageDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>fromMessageDetails</name>
			<param>
				<name>details</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getMessageTimestamp</name>
			<comment><![CDATA[Method which calculates smack message timestamp. Message creation date can be retrieved from the offline messages.]]></comment>
			<param>
				<name>message</name>
				<type>org.jivesoftware.smack.packet.Message</type>
				<required>true</required>
				<comment><![CDATA[from smack]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Date]]></comment>
			</return>
		</method>
		<method>
			<name>toMessageDetailsList</name>
			<param>
				<name>messages</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toMessageDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getFrom</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFrom</name>
			<param>
				<name>from</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getTo</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setTo</name>
			<param>
				<name>to</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getCreatedAt</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setCreatedAt</name>
			<param>
				<name>createdAt</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBody</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBody</name>
			<param>
				<name>body</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>to</name>
		</field>
		<field>
			<name>from</name>
		</field>
		<field>
			<name>createdAt</name>
		</field>
		<field>
			<name>body</name>
		</field>
	</javadoc>
	<javadoc>
		<name>MessageDeprecated</name>
		<type>com.marcelmika.lims.jabber.domain.MessageDeprecated</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>MessageDeprecated</name>
			<param>
				<name>smackMesasge</name>
				<type>org.jivesoftware.smack.packet.Message</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getMessageTimestamp</name>
			<param>
				<name>message</name>
				<type>org.jivesoftware.smack.packet.Message</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFrom</name>
			<param>
				<name>from</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getFrom</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getTo</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getCompanyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setCompanyId</name>
			<param>
				<name>companyId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>setBody</name>
			<param>
				<name>body</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBody</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getCreated</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toString</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toJSON</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>smackMessage</name>
		</field>
		<field>
			<name>companyId</name>
		</field>
		<field>
			<name>created</name>
		</field>
	</javadoc>
	<javadoc>
		<name>MultiUserConversation</name>
		<type>com.marcelmika.lims.jabber.domain.MultiUserConversation</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getConversationType</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationType</name>
			<param>
				<name>conversationType</name>
				<type>ConversationType</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>conversationType</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Presence</name>
		<type>com.marcelmika.lims.jabber.domain.Presence</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>Presence</name>
			<param>
				<name>code</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>fromPresenceDetails</name>
			<comment><![CDATA[Factory method which creates new Presence from PresenceDetails]]></comment>
			<param>
				<name>presenceDetails</name>
				<type>com.marcelmika.lims.api.entity.PresenceDetails</type>
				<required>true</required>
				<comment><![CDATA[PresenceDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Presence]]></comment>
			</return>
		</method>
		<method>
			<name>fromSmackPresence</name>
			<param>
				<name>smackPresence</name>
				<type>org.jivesoftware.smack.packet.Presence</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getCode</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toPresenceDetails</name>
			<comment><![CDATA[Maps Presence to PresenceDetails]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[PresenceDetails]]></comment>
			</return>
		</method>
		<method>
			<name>toSmackPresence</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>STATE_ACTIVE</name>
		</field>
		<field>
			<name>STATE_AWAY</name>
		</field>
		<field>
			<name>STATE_DND</name>
		</field>
		<field>
			<name>STATE_OFFLINE</name>
		</field>
		<field>
			<name>STATE_UNRECOGNIZED</name>
		</field>
		<field>
			<name>code</name>
		</field>
	</javadoc>
	<javadoc>
		<name>SUConversation</name>
		<type>com.marcelmika.lims.jabber.domain.SUConversation</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>SUConversation</name>
			<param>
				<name>owner</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>chat</name>
				<type>org.jivesoftware.smack.Chat</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>attachParticipant</name>
		</method>
		<method>
			<name>getChat</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getParticipants</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>addParticipant</name>
			<param>
				<name>participant</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getMessages</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getOwner</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationVisibility</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>restart</name>
		</method>
		<method>
			<name>getLastMessage</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getLastMessageSent</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setLastMessageSent</name>
			<param>
				<name>lastMessageSent</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getIndexOfLastMessage</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getUnreadMessages</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toJSON</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toFullJSON</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>owner</name>
		</field>
		<field>
			<name>chat</name>
		</field>
		<field>
			<name>messages</name>
		</field>
		<field>
			<name>participants</name>
		</field>
		<field>
			<name>conversationId</name>
		</field>
		<field>
			<name>lastMessageSent</name>
		</field>
	</javadoc>
	<javadoc>
		<name>SingleUserConversation</name>
		<type>com.marcelmika.lims.jabber.domain.SingleUserConversation</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromChat</name>
			<comment><![CDATA[Factory method creates single user conversation from smack chat]]></comment>
			<param>
				<name>chat</name>
				<type>org.jivesoftware.smack.Chat</type>
				<required>true</required>
				<comment><![CDATA[Conversation is created from the Chat.]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[SingleUserConversation]]></comment>
			</return>
		</method>
		<method>
			<name>fromConversationDetails</name>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.ConversationDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toConversationDetailsList</name>
			<param>
				<name>conversations</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toConversationDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>processMessage</name>
			<comment><![CDATA[Called whenever the buddy receives message]]></comment>
			<param>
				<name>chat</name>
				<type>org.jivesoftware.smack.Chat</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>smackMessage</name>
				<type>org.jivesoftware.smack.packet.Message</type>
				<required>true</required>
				<comment><![CDATA[which was received]]></comment>
			</param>
		</method>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationId</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getConversationType</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationType</name>
			<param>
				<name>conversationType</name>
				<type>ConversationType</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getParticipant</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setParticipant</name>
			<param>
				<name>participant</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getMessages</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMessages</name>
			<param>
				<name>messages</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>conversationId</name>
		</field>
		<field>
			<name>conversationType</name>
		</field>
		<field>
			<name>participant</name>
		</field>
		<field>
			<name>messages</name>
		</field>
	</javadoc>
	<javadoc>
		<name>JabberFormFactory</name>
		<type>com.marcelmika.lims.jabber.form.JabberFormFactory</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getMUCConfigurationForm</name>
			<comment><![CDATA[Returns configuration for multi user chat]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[Configuration form for multi user chat]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>PersistentRoomFormField</name>
		<type>com.marcelmika.lims.jabber.form.PersistentRoomFormField</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>PersistentRoomFormField</name>
			<param>
				<name>isPersistent</name>
				<type>boolean</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
	</javadoc>
	<javadoc>
		<name>GroupManager</name>
		<type>com.marcelmika.lims.jabber.group.manager.GroupManager</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>setRoster</name>
			<comment><![CDATA[Manage groups from roster]]></comment>
			<param>
				<name>roster</name>
				<type>org.jivesoftware.smack.Roster</type>
				<required>true</required>
				<comment><![CDATA[Roster]]></comment>
			</param>
		</method>
		<method>
			<name>getGroupCollection</name>
			<comment><![CDATA[Get buddy's collection of groups.]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[Buddy's collection of groups.]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>GroupManagerFactory</name>
		<type>com.marcelmika.lims.jabber.group.manager.GroupManagerFactory</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>buildManager</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>GroupManagerImpl</name>
		<type>com.marcelmika.lims.jabber.group.manager.GroupManagerImpl</type>
		<comment><![CDATA[Group manager is responsible for the synchronization of groups and their entries. It keeps fresh copy of Group Collection related to the user.]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>setRoster</name>
			<comment><![CDATA[Sets roster to group manager.]]></comment>
			<param>
				<name>roster</name>
				<type>org.jivesoftware.smack.Roster</type>
				<required>true</required>
				<comment><![CDATA[Roster]]></comment>
			</param>
		</method>
		<method>
			<name>getGroupCollection</name>
			<comment><![CDATA[Get buddy's collection of groups.]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[Buddy's collection of groups.]]></comment>
			</return>
		</method>
		<method>
			<name>entriesAdded</name>
			<param>
				<name>strings</name>
				<type>java.util.Collection</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>entriesUpdated</name>
			<param>
				<name>strings</name>
				<type>java.util.Collection</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>entriesDeleted</name>
			<param>
				<name>strings</name>
				<type>java.util.Collection</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>presenceChanged</name>
			<comment><![CDATA[Notify all listeners about changes. Called when the presence of a roster entry is changed. Care should be taken when using the presence data delivered as part of this event. Specifically, when a user account is online with multiple resources, the UI should account for that. For example, say a user is online with their desktop computer and mobile phone. If the user logs out of the IM client on their mobile phone, the user should not be shown in the roster (contact list) as offline since they're still available as another resource. To get the current "best presence" for a user after the presence update, query the roster: String user = presence.getFrom(); Presence bestPresence = roster.getPresence(user);]]></comment>
			<param>
				<name>presence</name>
				<type>org.jivesoftware.smack.packet.Presence</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>mapGroupsFromRoster</name>
			<comment><![CDATA[Whenever called the method takes roster and maps its groups and entities to our groups and entities]]></comment>
		</method>
		<field>
			<name>groupCollection</name>
		</field>
		<field>
			<name>roster</name>
		</field>
		<field>
			<name>wasModified</name>
		</field>
	</javadoc>
	<javadoc>
		<name>JabberChatManagerListener</name>
		<type>com.marcelmika.lims.jabber.listener.JabberChatManagerListener</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>JabberChatManagerListener</name>
			<param>
				<name>companyId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>chatCreated</name>
			<param>
				<name>chat</name>
				<type>org.jivesoftware.smack.Chat</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>createdLocally</name>
				<type>boolean</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>companyId</name>
		</field>
		<field>
			<name>userId</name>
		</field>
	</javadoc>
	<javadoc>
		<name>JabberMessageListener</name>
		<type>com.marcelmika.lims.jabber.listener.JabberMessageListener</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>JabberMessageListener</name>
		</method>
		<method>
			<name>JabberMessageListener</name>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.jabber.domain.Conversation</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>setConversation</name>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.jabber.domain.Conversation</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>processMessage</name>
			<param>
				<name>chat</name>
				<type>org.jivesoftware.smack.Chat</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>message</name>
				<type>org.jivesoftware.smack.packet.Message</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>conversation</name>
		</field>
	</javadoc>
	<javadoc>
		<name>JabberRosterListener</name>
		<type>com.marcelmika.lims.jabber.listener.JabberRosterListener</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>JabberRosterListener</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>companyId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>entriesAdded</name>
			<param>
				<name>strings</name>
				<type>java.util.Collection</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>entriesUpdated</name>
			<param>
				<name>strings</name>
				<type>java.util.Collection</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>entriesDeleted</name>
			<param>
				<name>strings</name>
				<type>java.util.Collection</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>presenceChanged</name>
			<param>
				<name>presence</name>
				<type>org.jivesoftware.smack.packet.Presence</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>userId</name>
		</field>
		<field>
			<name>companyId</name>
		</field>
	</javadoc>
	<javadoc>
		<name>BuddyJabberService</name>
		<type>com.marcelmika.lims.jabber.service.BuddyJabberService</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>connectBuddy</name>
			<comment><![CDATA[Connect buddy to the Jabber server]]></comment>
			<param>
				<name>event</name>
				<type>ConnectBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>loginBuddy</name>
			<comment><![CDATA[Login buddy to Jabber]]></comment>
			<param>
				<name>event</name>
				<type>LoginBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>logoutBuddy</name>
			<comment><![CDATA[Logout buddy from Jabber]]></comment>
			<param>
				<name>event</name>
				<type>LogoutBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>updatePresence</name>
			<comment><![CDATA[Change buddy's status]]></comment>
			<param>
				<name>event</name>
				<type>UpdatePresenceBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for method]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>BuddyJabberServiceImpl</name>
		<type>com.marcelmika.lims.jabber.service.BuddyJabberServiceImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>BuddyJabberServiceImpl</name>
			<comment><![CDATA[BuddyJabberServiceImpl]]></comment>
			<param>
				<name>userSessionStore</name>
				<type>com.marcelmika.lims.jabber.session.store.UserSessionStore</type>
				<required>true</required>
				<comment><![CDATA[UserSessionStore]]></comment>
			</param>
		</method>
		<method>
			<name>connectBuddy</name>
			<comment><![CDATA[Connect buddy to the Jabber server]]></comment>
			<param>
				<name>event</name>
				<type>ConnectBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>loginBuddy</name>
			<comment><![CDATA[Login buddy to Jabber]]></comment>
			<param>
				<name>event</name>
				<type>LoginBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for login method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for login method]]></comment>
			</return>
		</method>
		<method>
			<name>logoutBuddy</name>
			<comment><![CDATA[Logout buddy from Jabber]]></comment>
			<param>
				<name>event</name>
				<type>LogoutBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>updatePresence</name>
			<comment><![CDATA[Change buddy's status]]></comment>
			<param>
				<name>event</name>
				<type>UpdatePresenceBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<field>
			<name>userSessionStore</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConversationJabberService</name>
		<type>com.marcelmika.lims.jabber.service.ConversationJabberService</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>createConversation</name>
			<comment><![CDATA[Creates new conversation]]></comment>
			<param>
				<name>event</name>
				<type>CreateConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<method>
			<name>getConversations</name>
			<comment><![CDATA[Get all conversations related to the particular user]]></comment>
			<param>
				<name>event</name>
				<type>GetConversationsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<method>
			<name>sendMessage</name>
			<comment><![CDATA[Sends message to conversation]]></comment>
			<param>
				<name>event</name>
				<type>SendMessageRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>ConversationJabberServiceImpl</name>
		<type>com.marcelmika.lims.jabber.service.ConversationJabberServiceImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>ConversationJabberServiceImpl</name>
			<comment><![CDATA[Constructor]]></comment>
			<param>
				<name>userSessionStore</name>
				<type>com.marcelmika.lims.jabber.session.store.UserSessionStore</type>
				<required>true</required>
				<comment><![CDATA[UserSessionStore]]></comment>
			</param>
		</method>
		<method>
			<name>createConversation</name>
			<comment><![CDATA[Creates new conversation]]></comment>
			<param>
				<name>event</name>
				<type>CreateConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<method>
			<name>getConversations</name>
			<comment><![CDATA[Get all conversations related to the particular buddy]]></comment>
			<param>
				<name>event</name>
				<type>GetConversationsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<method>
			<name>sendMessage</name>
			<comment><![CDATA[Sends message to conversation]]></comment>
			<param>
				<name>event</name>
				<type>SendMessageRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>createSingleUserConversation</name>
			<comment><![CDATA[Creates a single user conversation]]></comment>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.jabber.domain.SingleUserConversation</type>
				<required>true</required>
				<comment><![CDATA[SingleUserConversation]]></comment>
			</param>
			<param>
				<name>session</name>
				<type>com.marcelmika.lims.jabber.session.UserSession</type>
				<required>true</required>
				<comment><![CDATA[UserSession]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[CreateConversationResponseEvent]]></comment>
			</return>
		</method>
		<method>
			<name>sendSingleUserMessage</name>
			<comment><![CDATA[Sends message to a single user conversation]]></comment>
			<param>
				<name>conversation</name>
				<type>com.marcelmika.lims.jabber.domain.SingleUserConversation</type>
				<required>true</required>
				<comment><![CDATA[SingleUserConversation]]></comment>
			</param>
			<param>
				<name>message</name>
				<type>com.marcelmika.lims.jabber.domain.Message</type>
				<required>true</required>
				<comment><![CDATA[Message]]></comment>
			</param>
			<param>
				<name>session</name>
				<type>com.marcelmika.lims.jabber.session.UserSession</type>
				<required>true</required>
				<comment><![CDATA[UserSession]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[SendMessageResponseEvent]]></comment>
			</return>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>userSessionStore</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GroupJabberService</name>
		<type>com.marcelmika.lims.jabber.service.GroupJabberService</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getGroups</name>
			<comment><![CDATA[Get all groups related to the particular user]]></comment>
			<param>
				<name>event</name>
				<type>com.marcelmika.lims.api.events.group.GetGroupsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>GroupJabberServiceImpl</name>
		<type>com.marcelmika.lims.jabber.service.GroupJabberServiceImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>GroupJabberServiceImpl</name>
			<comment><![CDATA[Constructor]]></comment>
			<param>
				<name>userSessionStore</name>
				<type>com.marcelmika.lims.jabber.session.store.UserSessionStore</type>
				<required>true</required>
				<comment><![CDATA[UserSessionStore]]></comment>
			</param>
		</method>
		<method>
			<name>getGroups</name>
			<comment><![CDATA[Get all groups related to the particular user]]></comment>
			<param>
				<name>event</name>
				<type>com.marcelmika.lims.api.events.group.GetGroupsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<field>
			<name>userSessionStore</name>
		</field>
	</javadoc>
	<javadoc>
		<name>JabberSessionManager</name>
		<type>com.marcelmika.lims.jabber.session.JabberSessionManager</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<deprecated><![CDATA[]]></deprecated>
		<method>
			<name>JabberSessionManager</name>
			<comment><![CDATA[JabberSessionManager]]></comment>
			<param>
				<name>connectionManager</name>
				<type>com.marcelmika.lims.jabber.connection.manager.ConnectionManagerImpl</type>
				<required>true</required>
				<comment><![CDATA[JabberConnectionManager]]></comment>
			</param>
			<param>
				<name>conversationManager</name>
				<type>com.marcelmika.lims.jabber.conversation.ConversationManager</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>login</name>
			<comment><![CDATA[Connects to server and performs login action]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[long]]></comment>
			</param>
			<param>
				<name>username</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[String]]></comment>
			</param>
			<param>
				<name>password</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[String]]></comment>
			</param>
			<throws>
				<name>com.marcelmika.lims.jabber.JabberException</name>
				<type>com.marcelmika.lims.jabber.JabberException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>logout</name>
			<comment><![CDATA[Signs out from jabber server and remove conversation from container]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[long]]></comment>
			</param>
			<throws>
				<name>com.marcelmika.lims.jabber.JabberException</name>
				<type>com.marcelmika.lims.jabber.JabberException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>importUserAndLogin</name>
			<comment><![CDATA[Imports user to jabber server if enabled and tries to login again]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[long]]></comment>
			</param>
			<param>
				<name>username</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[String]]></comment>
			</param>
			<param>
				<name>password</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[String]]></comment>
			</param>
			<param>
				<name>connection</name>
				<type>org.jivesoftware.smack.Connection</type>
				<required>true</required>
				<comment><![CDATA[Connection]]></comment>
			</param>
			<throws>
				<name>com.marcelmika.lims.jabber.JabberException</name>
				<type>com.marcelmika.lims.jabber.JabberException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>addToSystem</name>
			<comment><![CDATA[TODO: Refactor, rename, etc.]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>connection</name>
				<type>org.jivesoftware.smack.Connection</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>importUser</name>
			<comment><![CDATA[Imports user to the Jabber server if enabled]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[long]]></comment>
			</param>
			<param>
				<name>username</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>password</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[String]]></comment>
			</param>
			<param>
				<name>connection</name>
				<type>org.jivesoftware.smack.Connection</type>
				<comment><![CDATA[]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>setInitialPresence</name>
			<comment><![CDATA[Set user initial presence in liferay and jabber server]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[long]]></comment>
			</param>
			<param>
				<name>connection</name>
				<type>org.jivesoftware.smack.Connection</type>
				<required>true</required>
				<comment><![CDATA[Connection]]></comment>
			</param>
		</method>
		<method>
			<name>setRosterListener</name>
			<comment><![CDATA[Sets roster listener for the particular user and connection]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[long]]></comment>
			</param>
			<param>
				<name>connection</name>
				<type>org.jivesoftware.smack.Connection</type>
				<required>true</required>
				<comment><![CDATA[Connection]]></comment>
			</param>
		</method>
		<method>
			<name>addBuddiesToRoster</name>
			<comment><![CDATA[Adds local buddies to roster]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[long]]></comment>
			</param>
			<param>
				<name>connection</name>
				<type>org.jivesoftware.smack.Connection</type>
				<required>true</required>
				<comment><![CDATA[Connection]]></comment>
			</param>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>connectionManager</name>
		</field>
		<field>
			<name>conversationManager</name>
			<deprecated><![CDATA[]]></deprecated>
		</field>
	</javadoc>
	<javadoc>
		<name>UserSession</name>
		<type>com.marcelmika.lims.jabber.session.UserSession</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>UserSession</name>
			<comment><![CDATA[Constructor]]></comment>
			<param>
				<name>sessionId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[identifier]]></comment>
			</param>
		</method>
		<method>
			<name>fromConnectionManager</name>
			<comment><![CDATA[Factory method which creates user session form connection manager]]></comment>
			<param>
				<name>sessionId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[id of the session]]></comment>
			</param>
			<param>
				<name>connectionManager</name>
				<type>com.marcelmika.lims.jabber.connection.manager.ConnectionManager</type>
				<required>true</required>
				<comment><![CDATA[used to create session manager]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[UserSession object]]></comment>
			</return>
		</method>
		<method>
			<name>createGroupManager</name>
			<comment><![CDATA[Creates new group manager]]></comment>
			<param>
				<name>connectionManager</name>
				<type>com.marcelmika.lims.jabber.connection.manager.ConnectionManager</type>
				<required>true</required>
				<comment><![CDATA[used to create group manager]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Group manager]]></comment>
			</return>
		</method>
		<method>
			<name>createSingleUserConversationManager</name>
			<comment><![CDATA[Create new single user conversation manager]]></comment>
			<param>
				<name>connectionManager</name>
				<type>com.marcelmika.lims.jabber.connection.manager.ConnectionManager</type>
				<required>true</required>
				<comment><![CDATA[used to create single user conversation manager]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[SingleUserConversationManager]]></comment>
			</return>
		</method>
		<method>
			<name>createMultiUserConversationManager</name>
			<comment><![CDATA[Create new multi user conversation manager]]></comment>
			<param>
				<name>connectionManager</name>
				<type>com.marcelmika.lims.jabber.connection.manager.ConnectionManager</type>
				<required>true</required>
				<comment><![CDATA[used to create multi user conversation manager]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[MultiUserConversationManager]]></comment>
			</return>
		</method>
		<method>
			<name>getSessionId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConnectionManager</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConnectionManager</name>
			<param>
				<name>connectionManager</name>
				<type>com.marcelmika.lims.jabber.connection.manager.ConnectionManager</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getGroupManager</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setGroupManager</name>
			<param>
				<name>groupManager</name>
				<type>com.marcelmika.lims.jabber.group.manager.GroupManager</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getSingleUserConversationManager</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setSingleUserConversationManager</name>
			<param>
				<name>singleUserConversationManager</name>
				<type>com.marcelmika.lims.jabber.conversation.manager.single.SingleUserConversationManager</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getMultiUserConversationManager</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMultiUserConversationManager</name>
			<param>
				<name>multiUserConversationManager</name>
				<type>com.marcelmika.lims.jabber.conversation.manager.multi.MultiUserConversationManager</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>sessionId</name>
		</field>
		<field>
			<name>connectionManager</name>
		</field>
		<field>
			<name>groupManager</name>
		</field>
		<field>
			<name>singleUserConversationManager</name>
		</field>
		<field>
			<name>multiUserConversationManager</name>
		</field>
	</javadoc>
	<javadoc>
		<name>UserSessionStore</name>
		<type>com.marcelmika.lims.jabber.session.store.UserSessionStore</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getUserSession</name>
			<comment><![CDATA[Returns stored user session]]></comment>
			<param>
				<name>id</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[of the user session]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[UserSession]]></comment>
			</return>
		</method>
		<method>
			<name>removeUserSession</name>
			<comment><![CDATA[Removes user session from the store]]></comment>
			<param>
				<name>id</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[of the user session]]></comment>
			</param>
		</method>
		<method>
			<name>addUserSession</name>
			<comment><![CDATA[Adds user session to the store]]></comment>
			<param>
				<name>userSession</name>
				<type>com.marcelmika.lims.jabber.session.UserSession</type>
				<required>true</required>
				<comment><![CDATA[UserSession]]></comment>
			</param>
		</method>
		<method>
			<name>containsUserSession</name>
			<comment><![CDATA[Returns true if the store contains user session]]></comment>
			<param>
				<name>id</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[of the user session]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[true if the store contains user session]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>UserSessionStoreImpl</name>
		<type>com.marcelmika.lims.jabber.session.store.UserSessionStoreImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getUserSession</name>
			<comment><![CDATA[Returns stored user session]]></comment>
			<param>
				<name>id</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[of the user session]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[UserSession]]></comment>
			</return>
		</method>
		<method>
			<name>removeUserSession</name>
			<comment><![CDATA[Removes user session from the store]]></comment>
			<param>
				<name>id</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[of the user session]]></comment>
			</param>
		</method>
		<method>
			<name>addUserSession</name>
			<comment><![CDATA[Adds user session to the store]]></comment>
			<param>
				<name>userSession</name>
				<type>com.marcelmika.lims.jabber.session.UserSession</type>
				<required>true</required>
				<comment><![CDATA[UserSession]]></comment>
			</param>
		</method>
		<method>
			<name>containsUserSession</name>
			<comment><![CDATA[Returns true if the store contains user session]]></comment>
			<param>
				<name>id</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[of the user session]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[true if the store contains user session]]></comment>
			</return>
		</method>
		<field>
			<name>connectionManagerMap</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Jid</name>
		<type>com.marcelmika.lims.jabber.utils.Jid</type>
		<comment><![CDATA[Provides methods to process Jabber Identifier. Warning: Implementation should be review, methods renamed according to http://xmpp.org/rfcs/rfc6122.html]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getFullJid</name>
			<comment><![CDATA[Returns full Jid from user name in the form of user@host/resource]]></comment>
			<param>
				<name>user</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[name]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Lower cased full jid]]></comment>
			</return>
		</method>
		<method>
			<name>getJid</name>
			<comment><![CDATA[Returns Jid from user name in the form of user@host]]></comment>
			<param>
				<name>user</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[name]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Lower cased jid]]></comment>
			</return>
		</method>
		<method>
			<name>getResource</name>
			<comment><![CDATA[Returns the resource portion of a XMPP address. For example, for the address "matt@jivesoftware.com/Smack", "Smack" would be returned. If no resource is present in the address, the empty string will be returned.]]></comment>
			<param>
				<name>user</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Lower cased resource or <code>null</code> for <code>null</code> argument.]]></comment>
			</return>
		</method>
		<method>
			<name>getServer</name>
			<comment><![CDATA[Returns the server portion of a XMPP address. For example, for the address "matt@jivesoftware.com/Smack", "jivesoftware.com" would be returned. If no server is present in the address, the empty string will be returned.]]></comment>
			<param>
				<name>user</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Lower cased server name or <code>null</code> for <code>null</code> argument.]]></comment>
			</return>
		</method>
		<method>
			<name>getName</name>
			<comment><![CDATA[Returns the name portion of a XMPP address. For example, for the address "matt@jivesoftware.com/Smack", "matt" would be returned. If no username is present in the address, the empty string will be returned.]]></comment>
			<param>
				<name>user</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Lower cased user name part or <code>null</code> for <code>null</code> argument.]]></comment>
			</return>
		</method>
		<method>
			<name>getBareAddress</name>
			<comment><![CDATA[Returns the XMPP address with any resource information removed. For example, for the address "matt@jivesoftware.com/Smack", "matt@jivesoftware.com" would be returned.]]></comment>
			<param>
				<name>user</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Lower cased bare address or <code>null</code> for <code>null</code> argument.]]></comment>
			</return>
		</method>
		<method>
			<name>getStringPrep</name>
			<comment><![CDATA[Gets lower cased address.]]></comment>
			<param>
				<name>user</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>Buddy</name>
		<type>com.marcelmika.lims.persistence.domain.Buddy</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromBuddyDetails</name>
			<comment><![CDATA[Create new user and maps data from user details]]></comment>
			<param>
				<name>buddyDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<required>true</required>
				<comment><![CDATA[BuddyDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[User]]></comment>
			</return>
		</method>
		<method>
			<name>fromBuddyDetailsList</name>
			<comment><![CDATA[Factory method which creates new list of Buddies from the list of BuddyDetails]]></comment>
			<param>
				<name>detailsList</name>
				<type>java.util.List</type>
				<required>true</required>
				<comment><![CDATA[list of buddy details]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[List<Buddy> of buddies]]></comment>
			</return>
		</method>
		<method>
			<name>fromParticipantModel</name>
			<comment><![CDATA[Factory method which creates buddy from participant model]]></comment>
			<param>
				<name>participant</name>
				<type>com.marcelmika.lims.persistence.generated.model.Participant</type>
				<required>true</required>
				<comment><![CDATA[Participant]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Buddy]]></comment>
			</return>
		</method>
		<method>
			<name>fromPlainObject</name>
			<comment><![CDATA[Factory method which creates buddy from plain java object usually retrieved from database]]></comment>
			<param>
				<name>object</name>
				<type>java.lang.Object[]</type>
				<required>true</required>
				<comment><![CDATA[Object[] array which contains buddy data]]></comment>
			</param>
			<param>
				<name>firstElement</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[determines first element in Object[] where the buddy serialization should start]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Buddy]]></comment>
			</return>
		</method>
		<method>
			<name>toBuddyDetails</name>
			<comment><![CDATA[Maps user to user details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[UserDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBuddyId</name>
			<param>
				<name>buddyId</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getFullName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFullName</name>
			<param>
				<name>fullName</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getScreenName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setScreenName</name>
			<param>
				<name>screenName</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getPassword</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPassword</name>
			<param>
				<name>password</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getPresence</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPresence</name>
			<param>
				<name>presence</name>
				<type>Presence</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>buddyId</name>
		</field>
		<field>
			<name>fullName</name>
		</field>
		<field>
			<name>screenName</name>
		</field>
		<field>
			<name>password</name>
		</field>
		<field>
			<name>presence</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Conversation</name>
		<type>com.marcelmika.lims.persistence.domain.Conversation</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromConversationDetails</name>
			<comment><![CDATA[Factory method which creates new list of Conversations from the list of ConversationDetails]]></comment>
			<param>
				<name>detailsList</name>
				<type>java.util.List</type>
				<required>true</required>
				<comment><![CDATA[list of conversation details]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[List<Conversation> of conversations]]></comment>
			</return>
		</method>
		<method>
			<name>fromConversationDetails</name>
			<comment><![CDATA[Factory method which creates new Conversation from the ConversationDetails]]></comment>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.ConversationDetails</type>
				<required>true</required>
				<comment><![CDATA[conversation details]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Conversation]]></comment>
			</return>
		</method>
		<method>
			<name>fromConversationModel</name>
			<param>
				<name>conversationModel</name>
				<type>com.marcelmika.lims.persistence.generated.model.Conversation</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toConversationDetails</name>
			<comment><![CDATA[Maps conversation to conversation details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[ConversationDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationId</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getConversationType</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationType</name>
			<param>
				<name>conversationType</name>
				<type>ConversationType</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddy</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBuddy</name>
			<param>
				<name>buddy</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getParticipants</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setParticipants</name>
			<param>
				<name>participants</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getMessages</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMessages</name>
			<param>
				<name>messages</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getUnreadMessagesCount</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setUnreadMessagesCount</name>
			<param>
				<name>unreadMessagesCount</name>
				<type>java.lang.Integer</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getUpdatedAt</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setUpdatedAt</name>
			<param>
				<name>updatedAt</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>conversationId</name>
		</field>
		<field>
			<name>conversationType</name>
		</field>
		<field>
			<name>unreadMessagesCount</name>
		</field>
		<field>
			<name>buddy</name>
		</field>
		<field>
			<name>participants</name>
		</field>
		<field>
			<name>messages</name>
		</field>
		<field>
			<name>updatedAt</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConversationType</name>
		<type>com.marcelmika.lims.persistence.domain.ConversationType</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromConversationTypeDetails</name>
			<comment><![CDATA[Factory method which creates new ConversationType from ConversationTypeDetails]]></comment>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.ConversationTypeDetails</type>
				<required>true</required>
				<comment><![CDATA[conversation type details]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ConversationType]]></comment>
			</return>
		</method>
		<method>
			<name>toConversationTypeDetails</name>
			<comment><![CDATA[Maps Presence to PresenceDetails]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[PresenceDetails]]></comment>
			</return>
		</method>
		<method>
			<name>ConversationType</name>
			<param>
				<name>code</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getCode</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>SINGLE_USER</name>
		</field>
		<field>
			<name>MULTI_USER</name>
		</field>
		<field>
			<name>UNRECOGNIZED</name>
		</field>
		<field>
			<name>code</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Group</name>
		<type>com.marcelmika.lims.persistence.domain.Group</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromGroupDetails</name>
			<comment><![CDATA[Creates new group and maps data from group details]]></comment>
			<param>
				<name>groupDetails</name>
				<type>com.marcelmika.lims.api.entity.GroupDetails</type>
				<required>true</required>
				<comment><![CDATA[GroupDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Group]]></comment>
			</return>
		</method>
		<method>
			<name>fromPlainObject</name>
			<comment><![CDATA[Factory method which creates group from plain java object usually retrieved from database]]></comment>
			<param>
				<name>object</name>
				<type>java.lang.Object[]</type>
				<required>true</required>
				<comment><![CDATA[Object[] array which contains group data]]></comment>
			</param>
			<param>
				<name>firstElement</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[determines first element in Object[] where the group serialization should start]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Group]]></comment>
			</return>
		</method>
		<method>
			<name>toGroupDetails</name>
			<comment><![CDATA[Maps group to group details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[GroupDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddies</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>addBuddy</name>
			<param>
				<name>buddy</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setName</name>
			<param>
				<name>name</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<comment><![CDATA[String representation of the Group.]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[A String representation of the Group.]]></comment>
			</return>
		</method>
		<field>
			<name>name</name>
		</field>
		<field>
			<name>buddies</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GroupCollection</name>
		<type>com.marcelmika.lims.persistence.domain.GroupCollection</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>toGroupCollectionDetails</name>
			<comment><![CDATA[Maps a list of groups to a list of group details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[list of group details]]></comment>
			</return>
		</method>
		<method>
			<name>addGroup</name>
			<comment><![CDATA[Adds group to groups list]]></comment>
			<param>
				<name>group</name>
				<type>Group</type>
				<required>true</required>
				<comment><![CDATA[Group]]></comment>
			</param>
		</method>
		<method>
			<name>getLastModified</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setLastModified</name>
			<param>
				<name>lastModified</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getGroups</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setGroups</name>
			<param>
				<name>groups</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>lastModified</name>
		</field>
		<field>
			<name>groups</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Message</name>
		<type>com.marcelmika.lims.persistence.domain.Message</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromMessageDetails</name>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.MessageDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>fromMessageDetails</name>
			<param>
				<name>details</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>fromMessageModel</name>
			<param>
				<name>messageModel</name>
				<type>com.marcelmika.lims.persistence.generated.model.Message</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toMessageDetailsList</name>
			<param>
				<name>messages</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>toMessageDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getFrom</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFrom</name>
			<param>
				<name>from</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getCreatedAt</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setCreatedAt</name>
			<param>
				<name>createdAt</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBody</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBody</name>
			<param>
				<name>body</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getMessageHash</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMessageHash</name>
			<param>
				<name>messageHash</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>from</name>
		</field>
		<field>
			<name>body</name>
		</field>
		<field>
			<name>createdAt</name>
		</field>
		<field>
			<name>messageHash</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Pagination</name>
		<type>com.marcelmika.lims.persistence.domain.Pagination</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromPaginationDetails</name>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.PaginationDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getFirstMessageId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFirstMessageId</name>
			<param>
				<name>firstMessageId</name>
				<type>java.lang.Integer</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getLastMessageId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setLastMessageId</name>
			<param>
				<name>lastMessageId</name>
				<type>java.lang.Integer</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getAction</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setAction</name>
			<param>
				<name>action</name>
				<type>com.marcelmika.lims.persistence.domain.Pagination.Action</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>firstMessageId</name>
		</field>
		<field>
			<name>lastMessageId</name>
		</field>
		<field>
			<name>action</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Presence</name>
		<type>com.marcelmika.lims.persistence.domain.Presence</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>Presence</name>
			<comment><![CDATA[Constructor]]></comment>
			<param>
				<name>code</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[which uniquely determines presence]]></comment>
			</param>
			<param>
				<name>description</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[string description of presence]]></comment>
			</param>
		</method>
		<method>
			<name>fromPresenceDetails</name>
			<comment><![CDATA[Factory method which creates new Presence from PresenceDetails]]></comment>
			<param>
				<name>presenceDetails</name>
				<type>com.marcelmika.lims.api.entity.PresenceDetails</type>
				<required>true</required>
				<comment><![CDATA[PresenceDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Presence]]></comment>
			</return>
		</method>
		<method>
			<name>toPresenceDetails</name>
			<comment><![CDATA[Maps Presence to PresenceDetails]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[PresenceDetails]]></comment>
			</return>
		</method>
		<method>
			<name>fromDescription</name>
			<comment><![CDATA[Creates Presence from String description]]></comment>
			<param>
				<name>description</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[String]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Presence]]></comment>
			</return>
		</method>
		<method>
			<name>getCode</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getDescription</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>ACTIVE</name>
		</field>
		<field>
			<name>AWAY</name>
		</field>
		<field>
			<name>DND</name>
		</field>
		<field>
			<name>OFFLINE</name>
		</field>
		<field>
			<name>UNRECOGNIZED</name>
		</field>
		<field>
			<name>code</name>
		</field>
		<field>
			<name>description</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Settings</name>
		<type>com.marcelmika.lims.persistence.domain.Settings</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromServiceBuilderModel</name>
			<comment><![CDATA[Factory method which builds Settings object from Panel and Settings Model taken from database]]></comment>
			<param>
				<name>panelModel</name>
				<type>com.marcelmika.lims.persistence.generated.model.Panel</type>
				<required>true</required>
				<comment><![CDATA[Panel model]]></comment>
			</param>
			<param>
				<name>settingsModel</name>
				<type>com.marcelmika.lims.persistence.generated.model.Settings</type>
				<required>true</required>
				<comment><![CDATA[Settings model]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Settings]]></comment>
			</return>
		</method>
		<method>
			<name>fromSettingsDetails</name>
			<comment><![CDATA[Create new settings and maps data from settings details]]></comment>
			<param>
				<name>settingsDetails</name>
				<type>com.marcelmika.lims.api.entity.SettingsDetails</type>
				<required>true</required>
				<comment><![CDATA[SettingsDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Settings]]></comment>
			</return>
		</method>
		<method>
			<name>toSettingsDetails</name>
			<comment><![CDATA[Maps settings to settings details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[SettingsDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getPresence</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPresence</name>
			<param>
				<name>presence</name>
				<type>Presence</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getActivePanel</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setActivePanel</name>
			<param>
				<name>activePanel</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>isMute</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMute</name>
			<param>
				<name>isMute</name>
				<type>boolean</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>isChatEnabled</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setChatEnabled</name>
			<param>
				<name>isChatEnabled</name>
				<type>boolean</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>presence</name>
		</field>
		<field>
			<name>activePanel</name>
		</field>
		<field>
			<name>isMute</name>
		</field>
		<field>
			<name>isChatEnabled</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConversationImpl</name>
		<type>com.marcelmika.lims.persistence.generated.model.impl.ConversationImpl</type>
		<comment><![CDATA[The extended model implementation for the Conversation service. Represents a row in the &quot;lims_Conversation&quot; database table, with each column mapped to a property of this class.

<p>
Helper methods and all application logic should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.model.Conversation} interface.
</p>]]></comment>
		<author><![CDATA[Brian Wing Shun Chan]]></author>
		<method>
			<name>ConversationImpl</name>
		</method>
	</javadoc>
	<javadoc>
		<name>MessageImpl</name>
		<type>com.marcelmika.lims.persistence.generated.model.impl.MessageImpl</type>
		<comment><![CDATA[The extended model implementation for the Message service. Represents a row in the &quot;lims_Message&quot; database table, with each column mapped to a property of this class.

<p>
Helper methods and all application logic should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.model.Message} interface.
</p>]]></comment>
		<author><![CDATA[Brian Wing Shun Chan]]></author>
		<method>
			<name>MessageImpl</name>
		</method>
	</javadoc>
	<javadoc>
		<name>PanelImpl</name>
		<type>com.marcelmika.lims.persistence.generated.model.impl.PanelImpl</type>
		<comment><![CDATA[The extended model implementation for the Panel service. Represents a row in the &quot;lims_Panel&quot; database table, with each column mapped to a property of this class.

<p>
Helper methods and all application logic should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.model.Panel} interface.
</p>]]></comment>
		<author><![CDATA[Brian Wing Shun Chan]]></author>
		<method>
			<name>PanelImpl</name>
		</method>
	</javadoc>
	<javadoc>
		<name>ParticipantImpl</name>
		<type>com.marcelmika.lims.persistence.generated.model.impl.ParticipantImpl</type>
		<comment><![CDATA[The extended model implementation for the Participant service. Represents a row in the &quot;lims_Participant&quot; database table, with each column mapped to a property of this class.

<p>
Helper methods and all application logic should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.model.Participant} interface.
</p>]]></comment>
		<author><![CDATA[Brian Wing Shun Chan]]></author>
		<method>
			<name>ParticipantImpl</name>
		</method>
	</javadoc>
	<javadoc>
		<name>SettingsImpl</name>
		<type>com.marcelmika.lims.persistence.generated.model.impl.SettingsImpl</type>
		<comment><![CDATA[The extended model implementation for the Settings service. Represents a row in the &quot;lims_Settings&quot; database table, with each column mapped to a property of this class.

<p>
Helper methods and all application logic should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.model.Settings} interface.
</p>]]></comment>
		<author><![CDATA[Brian Wing Shun Chan]]></author>
		<method>
			<name>SettingsImpl</name>
		</method>
	</javadoc>
	<javadoc>
		<name>ConversationLocalServiceImpl</name>
		<type>com.marcelmika.lims.persistence.generated.service.impl.ConversationLocalServiceImpl</type>
		<comment><![CDATA[The implementation of the conversation local service.

<p>
All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.service.ConversationLocalService} interface.  <p> This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
</p>]]></comment>
		<author><![CDATA[Brian Wing Shun Chan]]></author>
		<see><![CDATA[com.marcelmika.lims.persistence.generated.service.base.ConversationLocalServiceBaseImpl]]></see>
		<see><![CDATA[com.marcelmika.lims.persistence.generated.service.ConversationLocalServiceUtil]]></see>
		<method>
			<name>addConversation</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>conversationType</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>SystemException</name>
				<type>com.liferay.portal.kernel.exception.SystemException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getConversation</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>SystemException</name>
				<type>com.liferay.portal.kernel.exception.SystemException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>updateConversationTimestamp</name>
			<param>
				<name>cid</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
	</javadoc>
	<javadoc>
		<name>MessageLocalServiceImpl</name>
		<type>com.marcelmika.lims.persistence.generated.service.impl.MessageLocalServiceImpl</type>
		<comment><![CDATA[The implementation of the message local service. <p/>

<p>
All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.service.MessageLocalService} interface. <p/> <p> This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
</p>]]></comment>
		<author><![CDATA[Brian Wing Shun Chan]]></author>
		<see><![CDATA[com.marcelmika.lims.persistence.generated.service.base.MessageLocalServiceBaseImpl]]></see>
		<see><![CDATA[com.marcelmika.lims.persistence.generated.service.MessageLocalServiceUtil]]></see>
		<method>
			<name>addMessage</name>
			<param>
				<name>cid</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>creatorId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>body</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>messageHash</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>readMessages</name>
			<param>
				<name>cid</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<throws>
				<name>SystemException</name>
				<type>com.liferay.portal.kernel.exception.SystemException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
	</javadoc>
	<javadoc>
		<name>PanelLocalServiceImpl</name>
		<type>com.marcelmika.lims.persistence.generated.service.impl.PanelLocalServiceImpl</type>
		<comment><![CDATA[The implementation of the panel local service.

<p>
All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.service.PanelLocalService} interface.  <p> This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
</p>]]></comment>
		<author><![CDATA[Brian Wing Shun Chan]]></author>
		<see><![CDATA[com.marcelmika.lims.persistence.generated.service.base.PanelLocalServiceBaseImpl]]></see>
		<see><![CDATA[com.marcelmika.lims.persistence.generated.service.PanelLocalServiceUtil]]></see>
		<method>
			<name>getPanelByUser</name>
			<comment><![CDATA[Returns panel. Creates new if not found. Null on error]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>updateActivePanel</name>
			<param>
				<name>userId</name>
				<type>long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>activePanel</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
	</javadoc>
	<javadoc>
		<name>ParticipantLocalServiceImpl</name>
		<type>com.marcelmika.lims.persistence.generated.service.impl.ParticipantLocalServiceImpl</type>
		<comment><![CDATA[The implementation of the participant local service.

<p>
All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.service.ParticipantLocalService} interface.  <p> This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
</p>]]></comment>
		<author><![CDATA[Brian Wing Shun Chan]]></author>
		<see><![CDATA[com.marcelmika.lims.persistence.generated.service.base.ParticipantLocalServiceBaseImpl]]></see>
		<see><![CDATA[com.marcelmika.lims.persistence.generated.service.ParticipantLocalServiceUtil]]></see>
		<method>
			<name>addParticipant</name>
			<comment><![CDATA[Adds new participant to the system]]></comment>
			<param>
				<name>cid</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[Id of the conversation to which the participant belongs to]]></comment>
			</param>
			<param>
				<name>participantId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[User Id of the participant]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Participant Model]]></comment>
			</return>
			<throws>
				<name>SystemException</name>
				<type>com.liferay.portal.kernel.exception.SystemException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>updateParticipants</name>
			<comment><![CDATA[Given method updates all participants related to the conversation. By updated we mean incrementing of the unread message count if needed and opening the conversation if needed]]></comment>
			<param>
				<name>cid</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[Id of the conversation related to the participants]]></comment>
			</param>
			<throws>
				<name>SystemException</name>
				<type>com.liferay.portal.kernel.exception.SystemException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
			<throws>
				<name>PortalException</name>
				<type>com.liferay.portal.kernel.exception.PortalException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>closeConversation</name>
			<comment><![CDATA[Closes conversation for the particular participant id by setting isOpened flag to false.]]></comment>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[Conversation which should be closed]]></comment>
			</param>
			<param>
				<name>participantId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[Participant whose conversation should be closed]]></comment>
			</param>
			<throws>
				<name>com.marcelmika.lims.persistence.generated.NoSuchConversationException</name>
				<type>com.marcelmika.lims.persistence.generated.NoSuchConversationException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
			<throws>
				<name>SystemException</name>
				<type>com.liferay.portal.kernel.exception.SystemException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
			<throws>
				<name>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</name>
				<type>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>resetUnreadMessagesCounter</name>
			<comment><![CDATA[Resets counter of unread messages for the user who participates in the given conversation]]></comment>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[Conversation where the counter should be reset]]></comment>
			</param>
			<param>
				<name>participantId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[Participant whose counter should be reset]]></comment>
			</param>
			<throws>
				<name>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</name>
				<type>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</type>
				<comment><![CDATA[]]></comment>
			</throws>
			<throws>
				<name>SystemException</name>
				<type>com.liferay.portal.kernel.exception.SystemException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
			<throws>
				<name>com.marcelmika.lims.persistence.generated.NoSuchConversationException</name>
				<type>com.marcelmika.lims.persistence.generated.NoSuchConversationException</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getOpenedConversations</name>
			<comment><![CDATA[Returns a list of opened conversations where the the user participates]]></comment>
			<param>
				<name>participantId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[User Id of the participant]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[List of opened conversations]]></comment>
			</return>
			<throws>
				<name>SystemException</name>
				<type>com.liferay.portal.kernel.exception.SystemException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getConversationParticipants</name>
			<comment><![CDATA[Returns a list of users who participates in conversation]]></comment>
			<param>
				<name>cid</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[Id of the conversation related to the participants]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[list of participants]]></comment>
			</return>
			<throws>
				<name>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</name>
				<type>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</type>
				<comment><![CDATA[]]></comment>
			</throws>
			<throws>
				<name>SystemException</name>
				<type>com.liferay.portal.kernel.exception.SystemException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getParticipant</name>
			<comment><![CDATA[Returns particular participant based on the id]]></comment>
			<param>
				<name>cid</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>participantId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[Id of the participant]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[participant]]></comment>
			</return>
			<throws>
				<name>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</name>
				<type>com.marcelmika.lims.persistence.generated.NoSuchParticipantException</type>
				<comment><![CDATA[]]></comment>
			</throws>
			<throws>
				<name>SystemException</name>
				<type>com.liferay.portal.kernel.exception.SystemException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
	</javadoc>
	<javadoc>
		<name>SettingsLocalServiceImpl</name>
		<type>com.marcelmika.lims.persistence.generated.service.impl.SettingsLocalServiceImpl</type>
		<comment><![CDATA[The implementation of the settings local service. <p/>

<p>
All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.marcelmika.lims.persistence.generated.service.SettingsLocalService} interface. <p/> <p> This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
</p>]]></comment>
		<author><![CDATA[Brian Wing Shun Chan]]></author>
		<see><![CDATA[com.marcelmika.lims.persistence.generated.service.base.SettingsLocalServiceBaseImpl]]></see>
		<see><![CDATA[com.marcelmika.lims.persistence.generated.service.SettingsLocalServiceUtil]]></see>
		<method>
			<name>getSettingsByUser</name>
			<comment><![CDATA[Returns settings related to the user whose id is given in the parameter]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[id of the user whose setting you are requesting]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Settings]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>saveSettings</name>
			<comment><![CDATA[Saves settings object to persistence]]></comment>
			<param>
				<name>settings</name>
				<type>com.marcelmika.lims.persistence.generated.model.Settings</type>
				<required>true</required>
				<comment><![CDATA[Settings model]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Updated Settings]]></comment>
			</return>
			<throws>
				<name>SystemException</name>
				<type>com.liferay.portal.kernel.exception.SystemException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>changePresence</name>
			<comment><![CDATA[Updates user presence]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[id of the user whose presence should be updated]]></comment>
			</param>
			<param>
				<name>presence</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[new value of the presence]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>setChatEnabled</name>
			<comment><![CDATA[Updates chat enabled value. If set to true the portlet is fully functional. If set to false the chat will be disabled.]]></comment>
			<param>
				<name>userId</name>
				<type>long</type>
				<required>true</required>
				<comment><![CDATA[id of the user whose chat should be enabled/disabled]]></comment>
			</param>
			<param>
				<name>enabled</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[if set to true the chat will be enabled. If set to false it will be disabled.]]></comment>
			</param>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getAllGroups</name>
			<comment><![CDATA[Returns all buddies in the system]]></comment>
			<param>
				<name>userId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[of excluded user]]></comment>
			</param>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[true if default users should be ignored]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[value of the list]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[value of the list]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[List of objects where each object contains user info]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getSitesGroups</name>
			<comment><![CDATA[Returns all groups where the user participates]]></comment>
			<param>
				<name>userId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[of the user whose groups are we looking for]]></comment>
			</param>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[true if default users should be ignored]]></comment>
			</param>
			<param>
				<name>excludedSties</name>
				<type>java.lang.String[]</type>
				<required>true</required>
				<comment><![CDATA[list of names of sites which should be excluded]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[value of the list]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[value of the list]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[List of objects where each object contains group name and user info]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getSocialGroups</name>
			<comment><![CDATA[Returns all user's social relations]]></comment>
			<param>
				<name>userId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[of the user whose social relations are we looking for]]></comment>
			</param>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[true if default users should be ignored]]></comment>
			</param>
			<param>
				<name>relationTypes</name>
				<type>int[]</type>
				<required>true</required>
				<comment><![CDATA[an array of relation type codes that we are looking for]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[value of the list]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[value of the list]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[List objects where each object contains relation type and user info]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
	</javadoc>
	<javadoc>
		<name>SettingsFinderImpl</name>
		<type>com.marcelmika.lims.persistence.generated.service.persistence.SettingsFinderImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>findAllGroups</name>
			<comment><![CDATA[Finds all users except the one given in the parameter and their settings]]></comment>
			<param>
				<name>userId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[Excluded user]]></comment>
			</param>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[List of objects where each object contains user info]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>findSitesGroups</name>
			<comment><![CDATA[Returns]]></comment>
			<param>
				<name>userId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[of excluded user]]></comment>
			</param>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[true if default users should be ignored]]></comment>
			</param>
			<param>
				<name>excludedSties</name>
				<type>java.lang.String[]</type>
				<required>true</required>
				<comment><![CDATA[list of names of sites which should be excluded]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[value of the list]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[value of the list]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[List of objects where each object contains group name and user info]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>findSocialGroups</name>
			<comment><![CDATA[Returns all user's social relations]]></comment>
			<param>
				<name>userId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[of the user whose social relations are we looking for]]></comment>
			</param>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[true if default users should be ignored]]></comment>
			</param>
			<param>
				<name>relationTypes</name>
				<type>int[]</type>
				<required>true</required>
				<comment><![CDATA[an array of relation type codes that we are looking for]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[value of the list]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[value of the list]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[List objects where each object contains relation type and user info]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getFindAllUsersSQL</name>
			<comment><![CDATA[Generates SQL for find all users query]]></comment>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[determines if the default user should be ignored]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[SQL string for find all users query]]></comment>
			</return>
		</method>
		<method>
			<name>getFindByUsersGroupsSQL</name>
			<comment><![CDATA[Generates SQL for find by users query]]></comment>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[true if default users should be ignored]]></comment>
			</param>
			<param>
				<name>excludedGroups</name>
				<type>java.lang.String[]</type>
				<required>true</required>
				<comment><![CDATA[names of groups that should be excluded from the query]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[SQL string for find by users groups query]]></comment>
			</return>
		</method>
		<method>
			<name>getFindSocialGroups</name>
			<comment><![CDATA[Generates SQL for find by social groups query]]></comment>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[true if default users should be ignored]]></comment>
			</param>
			<param>
				<name>types</name>
				<type>int[]</type>
				<required>true</required>
				<comment><![CDATA[relation types that should be counted in]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[SQL string for find by social groups query]]></comment>
			</return>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>FIND_ALL_USERS</name>
		</field>
		<field>
			<name>FIND_BY_USERS_GROUPS</name>
		</field>
		<field>
			<name>FIND_BY_SOCIAL_GROUPS</name>
		</field>
		<field>
			<name>PLACEHOLDER_DEFAULT_USER</name>
		</field>
		<field>
			<name>PLACEHOLDER_USERS_GROUPS_JOIN</name>
		</field>
		<field>
			<name>PLACEHOLDER_USERS_GROUPS_WHERE</name>
		</field>
		<field>
			<name>PLACEHOLDER_SOCIAL_RELATION_TYPES</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GroupManager</name>
		<type>com.marcelmika.lims.persistence.manager.GroupManager</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getGroups</name>
			<comment><![CDATA[Returns Group Collection of all groups related to the user]]></comment>
			<param>
				<name>userId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[Long]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the list]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the list]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[GroupCollection of groups related to the user]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
	</javadoc>
	<javadoc>
		<name>GroupManagerImpl</name>
		<type>com.marcelmika.lims.persistence.manager.GroupManagerImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getGroups</name>
			<comment><![CDATA[Returns Group Collection of all groups related to the user]]></comment>
			<param>
				<name>userId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[Long]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the list]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the list]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[GroupCollection of groups related to the user]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getAllGroup</name>
			<comment><![CDATA[Returns group collection which contains all buddies in the system.]]></comment>
			<param>
				<name>userId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[which should be excluded from the list]]></comment>
			</param>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[boolean set to true if the default user should be excluded]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the list]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the list]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[GroupCollection]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getSitesGroups</name>
			<comment><![CDATA[Returns group collection which contains groups that represents sites where the user participates. The groups contain all users that are within except for the user given in param.]]></comment>
			<param>
				<name>userId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[which should be excluded from the list]]></comment>
			</param>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[boolean set to true if the default user should be excluded]]></comment>
			</param>
			<param>
				<name>excludedSites</name>
				<type>java.lang.String[]</type>
				<required>true</required>
				<comment><![CDATA[names of sites (groups) that should be excluded from the group collection]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the list]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the list]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[GroupCollection]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getSocialGroups</name>
			<comment><![CDATA[Returns group collection which contains groups that represent social relations of the user. The groups contain all users that are within except for the user given in param.]]></comment>
			<param>
				<name>userId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[which should be excluded from the list]]></comment>
			</param>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[boolean set to true if the default user should be excluded]]></comment>
			</param>
			<param>
				<name>relationTypes</name>
				<type>com.marcelmika.lims.api.environment.Environment.BuddyListSocialRelation[]</type>
				<required>true</required>
				<comment><![CDATA[an array of relation type enums]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the list]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the list]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[GroupCollection]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>getSitesAndSocialGroups</name>
			<comment><![CDATA[Returns group collection which contains groups that represent social relations of the user. The groups contain all users that are within except for the user given in param.]]></comment>
			<param>
				<name>userId</name>
				<type>java.lang.Long</type>
				<required>true</required>
				<comment><![CDATA[which should be excluded from the list]]></comment>
			</param>
			<param>
				<name>ignoreDefaultUser</name>
				<type>boolean</type>
				<required>true</required>
				<comment><![CDATA[boolean set to true if the default user should be excluded]]></comment>
			</param>
			<param>
				<name>excludedSites</name>
				<type>java.lang.String[]</type>
				<required>true</required>
				<comment><![CDATA[names of sites (groups) that should be excluded from the group collection]]></comment>
			</param>
			<param>
				<name>relationTypes</name>
				<type>com.marcelmika.lims.api.environment.Environment.BuddyListSocialRelation[]</type>
				<required>true</required>
				<comment><![CDATA[an array of relation type enums]]></comment>
			</param>
			<param>
				<name>start</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the list]]></comment>
			</param>
			<param>
				<name>end</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the list]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[GroupCollection]]></comment>
			</return>
			<throws>
				<name>Exception</name>
				<type>java.lang.Exception</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
	</javadoc>
	<javadoc>
		<name>BuddyPersistenceService</name>
		<type>com.marcelmika.lims.persistence.service.BuddyPersistenceService</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>loginBuddy</name>
			<comment><![CDATA[Login buddy to System]]></comment>
			<param>
				<name>event</name>
				<type>LoginBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for login method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for login method]]></comment>
			</return>
		</method>
		<method>
			<name>logoutBuddy</name>
			<comment><![CDATA[Logout buddy from System]]></comment>
			<param>
				<name>event</name>
				<type>LogoutBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>removeBuddy</name>
			<comment><![CDATA[Completely removes buddy from Persistence]]></comment>
			<param>
				<name>event</name>
				<type>DeleteBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>readPresence</name>
			<comment><![CDATA[Reads buddy's presence]]></comment>
			<param>
				<name>event</name>
				<type>ReadPresenceBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event]]></comment>
			</return>
		</method>
		<method>
			<name>updatePresence</name>
			<comment><![CDATA[Change buddy's presence]]></comment>
			<param>
				<name>event</name>
				<type>UpdatePresenceBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>BuddyPersistenceServiceImpl</name>
		<type>com.marcelmika.lims.persistence.service.BuddyPersistenceServiceImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>loginBuddy</name>
			<comment><![CDATA[Login buddy to System]]></comment>
			<param>
				<name>event</name>
				<type>LoginBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for login method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for login method]]></comment>
			</return>
		</method>
		<method>
			<name>logoutBuddy</name>
			<comment><![CDATA[Logout buddy from System]]></comment>
			<param>
				<name>event</name>
				<type>LogoutBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>removeBuddy</name>
			<comment><![CDATA[Completely removes buddy from Persistence]]></comment>
			<param>
				<name>event</name>
				<type>DeleteBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>readPresence</name>
			<comment><![CDATA[Reads buddy's presence]]></comment>
			<param>
				<name>event</name>
				<type>ReadPresenceBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event]]></comment>
			</return>
		</method>
		<method>
			<name>updatePresence</name>
			<comment><![CDATA[Change buddy's presence]]></comment>
			<param>
				<name>event</name>
				<type>UpdatePresenceBuddyRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>ConversationPersistenceService</name>
		<type>com.marcelmika.lims.persistence.service.ConversationPersistenceService</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>createConversation</name>
			<comment><![CDATA[Creates new conversation]]></comment>
			<param>
				<name>event</name>
				<type>CreateConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<method>
			<name>readConversation</name>
			<comment><![CDATA[Reads messages from conversation]]></comment>
			<param>
				<name>event</name>
				<type>ReadSingleUserConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>closeConversation</name>
			<comment><![CDATA[Closes existing conversation. User remains in the conversation though.]]></comment>
			<param>
				<name>event</name>
				<type>CloseConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>resetUnreadMessagesCounter</name>
			<comment><![CDATA[Reset counter of unread messages (usually displayed in badge) for the particular user and conversation]]></comment>
			<param>
				<name>event</name>
				<type>ResetUnreadMessagesCounterRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>sendMessage</name>
			<comment><![CDATA[Sends message to conversation]]></comment>
			<param>
				<name>event</name>
				<type>SendMessageRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>getOpenedConversations</name>
			<comment><![CDATA[Get all opened conversations related to the particular buddy]]></comment>
			<param>
				<name>event</name>
				<type>GetOpenedConversationsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>ConversationPersistenceServiceImpl</name>
		<type>com.marcelmika.lims.persistence.service.ConversationPersistenceServiceImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>createConversation</name>
			<comment><![CDATA[Creates new conversation]]></comment>
			<param>
				<name>event</name>
				<type>CreateConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<method>
			<name>readConversation</name>
			<comment><![CDATA[Reads messages from conversation]]></comment>
			<param>
				<name>event</name>
				<type>ReadSingleUserConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>closeConversation</name>
			<comment><![CDATA[Closes existing conversation. User remains in the conversation though.]]></comment>
			<param>
				<name>event</name>
				<type>CloseConversationRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>resetUnreadMessagesCounter</name>
			<comment><![CDATA[Reset counter of unread messages (usually displayed in badge) for the particular user and conversation]]></comment>
			<param>
				<name>event</name>
				<type>ResetUnreadMessagesCounterRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>sendMessage</name>
			<comment><![CDATA[Creates message within the conversation]]></comment>
			<param>
				<name>event</name>
				<type>SendMessageRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for method]]></comment>
			</return>
		</method>
		<method>
			<name>getOpenedConversations</name>
			<comment><![CDATA[Get all opened conversations related to the particular buddy]]></comment>
			<param>
				<name>event</name>
				<type>GetOpenedConversationsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<field>
			<name>log</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GroupPersistenceService</name>
		<type>com.marcelmika.lims.persistence.service.GroupPersistenceService</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getGroups</name>
			<comment><![CDATA[Get all groups related to the particular user]]></comment>
			<param>
				<name>event</name>
				<type>com.marcelmika.lims.api.events.group.GetGroupsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>GroupPersistenceServiceImpl</name>
		<type>com.marcelmika.lims.persistence.service.GroupPersistenceServiceImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>GroupPersistenceServiceImpl</name>
			<comment><![CDATA[Constructor]]></comment>
			<param>
				<name>groupManager</name>
				<type>com.marcelmika.lims.persistence.manager.GroupManager</type>
				<required>true</required>
				<comment><![CDATA[GroupManager]]></comment>
			</param>
		</method>
		<method>
			<name>getGroups</name>
			<comment><![CDATA[Get all groups related to the particular user]]></comment>
			<param>
				<name>event</name>
				<type>com.marcelmika.lims.api.events.group.GetGroupsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[request event for method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[response event for  method]]></comment>
			</return>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>groupManager</name>
		</field>
	</javadoc>
	<javadoc>
		<name>SettingsPersistenceService</name>
		<type>com.marcelmika.lims.persistence.service.SettingsPersistenceService</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>readSettings</name>
			<comment><![CDATA[Reads buddy's settings]]></comment>
			<param>
				<name>event</name>
				<type>ReadSettingsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event]]></comment>
			</return>
		</method>
		<method>
			<name>updateActivePanel</name>
			<comment><![CDATA[Update buddy's active panel (panel which is open)]]></comment>
			<param>
				<name>event</name>
				<type>UpdateActivePanelRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>updateSettings</name>
			<comment><![CDATA[Update buddy's settings]]></comment>
			<param>
				<name>event</name>
				<type>UpdateSettingsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>enableChat</name>
			<comment><![CDATA[Enables chat for buddy]]></comment>
			<param>
				<name>event</name>
				<type>EnableChatRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>disableChat</name>
			<comment><![CDATA[Disables chat for buddy]]></comment>
			<param>
				<name>event</name>
				<type>DisableChatRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>SettingsPersistenceServiceImpl</name>
		<type>com.marcelmika.lims.persistence.service.SettingsPersistenceServiceImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>readSettings</name>
			<comment><![CDATA[Reads buddy's settings]]></comment>
			<param>
				<name>event</name>
				<type>ReadSettingsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event]]></comment>
			</return>
		</method>
		<method>
			<name>updateActivePanel</name>
			<comment><![CDATA[Update buddy's active panel (panel which is open)]]></comment>
			<param>
				<name>event</name>
				<type>UpdateActivePanelRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>updateSettings</name>
			<comment><![CDATA[Update buddy's settings]]></comment>
			<param>
				<name>event</name>
				<type>UpdateSettingsRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>enableChat</name>
			<comment><![CDATA[Enables chat for buddy]]></comment>
			<param>
				<name>event</name>
				<type>EnableChatRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
		<method>
			<name>disableChat</name>
			<comment><![CDATA[Disables chat for buddy]]></comment>
			<param>
				<name>event</name>
				<type>DisableChatRequestEvent</type>
				<required>true</required>
				<comment><![CDATA[Request event for logout method]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Response event for logout method]]></comment>
			</return>
		</method>
	</javadoc>
	<javadoc>
		<name>Buddy</name>
		<type>com.marcelmika.lims.portal.domain.Buddy</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromRenderRequest</name>
			<comment><![CDATA[Creates an instance of Buddy form RenderRequest]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.RenderRequest</type>
				<required>true</required>
				<comment><![CDATA[RenderRequest]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Buddy]]></comment>
			</return>
		</method>
		<method>
			<name>fromResourceRequest</name>
			<comment><![CDATA[Factory method which creates new Buddy object from the PollerRequest]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[request]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Buddy]]></comment>
			</return>
		</method>
		<method>
			<name>fromPortalUser</name>
			<comment><![CDATA[Factory method which creates new Buddy object from portal User]]></comment>
			<param>
				<name>user</name>
				<type>com.liferay.portal.model.User</type>
				<required>true</required>
				<comment><![CDATA[User]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Buddy]]></comment>
			</return>
		</method>
		<method>
			<name>fromPortalServletRequest</name>
			<comment><![CDATA[Factory method which creates new Buddy object from HttpServletRequest]]></comment>
			<param>
				<name>request</name>
				<type>javax.servlet.http.HttpServletRequest</type>
				<required>true</required>
				<comment><![CDATA[HttpServletRequest]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Buddy]]></comment>
			</return>
			<throws>
				<name>SystemException</name>
				<type>com.liferay.portal.kernel.exception.SystemException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
			<throws>
				<name>PortalException</name>
				<type>com.liferay.portal.kernel.exception.PortalException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>fromHttpSession</name>
			<comment><![CDATA[Factory method which creates new Buddy object from HttpSession]]></comment>
			<param>
				<name>session</name>
				<type>javax.servlet.http.HttpSession</type>
				<required>true</required>
				<comment><![CDATA[HttpSession]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Buddy]]></comment>
			</return>
		</method>
		<method>
			<name>fromBuddyDetails</name>
			<comment><![CDATA[Factory method which creates new Buddy object from BuddyDetails]]></comment>
			<param>
				<name>buddyDetails</name>
				<type>com.marcelmika.lims.api.entity.BuddyDetails</type>
				<required>true</required>
				<comment><![CDATA[BuddyDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[User]]></comment>
			</return>
		</method>
		<method>
			<name>fromBuddyDetailsList</name>
			<comment><![CDATA[Factory method which creates new list of Buddies from the list of BuddyDetails]]></comment>
			<param>
				<name>detailsList</name>
				<type>java.util.List</type>
				<required>true</required>
				<comment><![CDATA[list of buddy details]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[List<Buddy> of buddies]]></comment>
			</return>
		</method>
		<method>
			<name>toBuddyDetails</name>
			<comment><![CDATA[Maps user to user details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[UserDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddyId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBuddyId</name>
			<param>
				<name>buddyId</name>
				<type>java.lang.Long</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getScreenName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setScreenName</name>
			<param>
				<name>screenName</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getPassword</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPassword</name>
			<param>
				<name>password</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getFullName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFullName</name>
			<param>
				<name>fullName</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getPresence</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPresence</name>
			<param>
				<name>presence</name>
				<type>Presence</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getSettings</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setSettings</name>
			<param>
				<name>settings</name>
				<type>Settings</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>KEY_FULL_NAME</name>
		</field>
		<field>
			<name>KEY_SCREEN_NAME</name>
		</field>
		<field>
			<name>KEY_PASSWORD</name>
		</field>
		<field>
			<name>buddyId</name>
		</field>
		<field>
			<name>fullName</name>
		</field>
		<field>
			<name>screenName</name>
		</field>
		<field>
			<name>password</name>
		</field>
		<field>
			<name>presence</name>
		</field>
		<field>
			<name>settings</name>
		</field>
	</javadoc>
	<javadoc>
		<name>BuddyCollection</name>
		<type>com.marcelmika.lims.portal.domain.BuddyCollection</type>
		<comment><![CDATA[Container which holds a collection of buddies]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromPollerRequest</name>
			<comment><![CDATA[Factory method which creates a collection of buddies from the poller request]]></comment>
			<param>
				<name>pollerRequest</name>
				<type>com.liferay.portal.kernel.poller.PollerRequest</type>
				<required>true</required>
				<comment><![CDATA[from portal]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Collection<Buddy> of buddies]]></comment>
			</return>
		</method>
		<method>
			<name>toBuddyCollectionDetails</name>
			<comment><![CDATA[Maps buddy collection to details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[BuddyCollectionDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddies</name>
			<comment><![CDATA[Get the collection of buddies]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[Collection of buddies]]></comment>
			</return>
		</method>
		<method>
			<name>addBuddy</name>
			<comment><![CDATA[Add buddy to the collection]]></comment>
			<param>
				<name>buddy</name>
				<type>Buddy</type>
				<required>true</required>
				<comment><![CDATA[Buddy to be added]]></comment>
			</param>
		</method>
		<method>
			<name>removeBuddy</name>
			<comment><![CDATA[Remove buddy from the collection.]]></comment>
			<param>
				<name>buddy</name>
				<type>Buddy</type>
				<required>true</required>
				<comment><![CDATA[Buddy to be removed]]></comment>
			</param>
		</method>
		<field>
			<name>KEY_BUDDIES</name>
		</field>
		<field>
			<name>buddiesMap</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Conversation</name>
		<type>com.marcelmika.lims.portal.domain.Conversation</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromConversationDetails</name>
			<comment><![CDATA[Factory method which creates new Conversation from the ConversationDetails]]></comment>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.ConversationDetails</type>
				<required>true</required>
				<comment><![CDATA[ConversationDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Conversation]]></comment>
			</return>
		</method>
		<method>
			<name>fromConversationDetailsList</name>
			<comment><![CDATA[Factory method which creates new list of Conversations from the list of ConversationDetails]]></comment>
			<param>
				<name>details</name>
				<type>java.util.List</type>
				<required>true</required>
				<comment><![CDATA[list of conversation details]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[List<Conversation> of conversations]]></comment>
			</return>
		</method>
		<method>
			<name>toConversationDetails</name>
			<comment><![CDATA[Maps conversation to conversation details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[ConversationDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getTitle</name>
			<comment><![CDATA[Returns conversation title]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[String title]]></comment>
			</return>
		</method>
		<method>
			<name>getEtag</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationId</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getConversationType</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationType</name>
			<param>
				<name>conversationType</name>
				<type>ConversationType</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getParticipants</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setParticipants</name>
			<param>
				<name>participants</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBuddy</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBuddy</name>
			<param>
				<name>buddy</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getUnreadMessagesCount</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setUnreadMessagesCount</name>
			<param>
				<name>unreadMessagesCount</name>
				<type>java.lang.Integer</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getMessages</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMessages</name>
			<param>
				<name>messages</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getUpdatedAt</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setUpdatedAt</name>
			<param>
				<name>updatedAt</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>conversationId</name>
		</field>
		<field>
			<name>conversationType</name>
		</field>
		<field>
			<name>unreadMessagesCount</name>
		</field>
		<field>
			<name>buddy</name>
		</field>
		<field>
			<name>participants</name>
		</field>
		<field>
			<name>messages</name>
		</field>
		<field>
			<name>updatedAt</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ConversationType</name>
		<type>com.marcelmika.lims.portal.domain.ConversationType</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>ConversationType</name>
			<comment><![CDATA[Constructor]]></comment>
			<param>
				<name>code</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[of the conversation type]]></comment>
			</param>
		</method>
		<method>
			<name>fromKey</name>
			<comment><![CDATA[Factory method which creates new ConversationType from the string key]]></comment>
			<param>
				<name>value</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[string key]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ConversationType]]></comment>
			</return>
		</method>
		<method>
			<name>fromConversationTypeDetails</name>
			<comment><![CDATA[Factory method which creates new ConversationType from ConversationTypeDetails]]></comment>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.ConversationTypeDetails</type>
				<required>true</required>
				<comment><![CDATA[conversation type details]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[ConversationType]]></comment>
			</return>
		</method>
		<method>
			<name>toConversationTypeDetails</name>
			<comment><![CDATA[Maps Presence to PresenceDetails]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[PresenceDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getCode</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>SINGLE_USER</name>
		</field>
		<field>
			<name>MULTI_USER</name>
		</field>
		<field>
			<name>UNRECOGNIZED</name>
		</field>
		<field>
			<name>KEY_SINGLE_USER</name>
		</field>
		<field>
			<name>KEY_MULTI_USER</name>
		</field>
		<field>
			<name>code</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Group</name>
		<type>com.marcelmika.lims.portal.domain.Group</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromGroupDetails</name>
			<comment><![CDATA[Create new group and maps data from group details]]></comment>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.GroupDetails</type>
				<required>true</required>
				<comment><![CDATA[GroupDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Group]]></comment>
			</return>
		</method>
		<method>
			<name>fromGroupDetails</name>
			<comment><![CDATA[Create a list of groups from a list of group details]]></comment>
			<param>
				<name>groupDetails</name>
				<type>java.util.List</type>
				<required>true</required>
				<comment><![CDATA[list of group details]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[list of groups]]></comment>
			</return>
		</method>
		<method>
			<name>toGroupDetails</name>
			<comment><![CDATA[Maps group to group details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[GroupDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddies</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>addBuddy</name>
			<param>
				<name>buddy</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getName</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setName</name>
			<param>
				<name>name</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<comment><![CDATA[String representation of the Group.]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[A String representation of the Group.]]></comment>
			</return>
		</method>
		<field>
			<name>KEY_BUDDIES</name>
		</field>
		<field>
			<name>name</name>
		</field>
		<field>
			<name>buddies</name>
		</field>
	</javadoc>
	<javadoc>
		<name>GroupCollection</name>
		<type>com.marcelmika.lims.portal.domain.GroupCollection</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromGroupCollectionDetails</name>
			<comment><![CDATA[Create new group and maps data from group details]]></comment>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.GroupCollectionDetails</type>
				<comment><![CDATA[]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[GroupCollection]]></comment>
			</return>
		</method>
		<method>
			<name>getGroups</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setGroups</name>
			<param>
				<name>groups</name>
				<type>java.util.List</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getEtag</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setEtag</name>
			<param>
				<name>etag</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getLastModified</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setLastModified</name>
			<param>
				<name>lastModified</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>groups</name>
		</field>
		<field>
			<name>lastModified</name>
		</field>
		<field>
			<name>etag</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Message</name>
		<type>com.marcelmika.lims.portal.domain.Message</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromMessageDetailsList</name>
			<comment><![CDATA[Factory method which creates a list of Messages from a list of MessageDetails]]></comment>
			<param>
				<name>detailsList</name>
				<type>java.util.List</type>
				<required>true</required>
				<comment><![CDATA[list of MessageDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Message]]></comment>
			</return>
		</method>
		<method>
			<name>fromMessageDetails</name>
			<comment><![CDATA[Factory method which creates new Message from the MessageDetails]]></comment>
			<param>
				<name>details</name>
				<type>com.marcelmika.lims.api.entity.MessageDetails</type>
				<required>true</required>
				<comment><![CDATA[message details]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Message]]></comment>
			</return>
		</method>
		<method>
			<name>toMessageDetails</name>
			<comment><![CDATA[Maps message to message details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[MessageDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getFrom</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFrom</name>
			<param>
				<name>from</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getCreatedAt</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setCreatedAt</name>
			<param>
				<name>createdAt</name>
				<type>java.util.Date</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getBody</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBody</name>
			<param>
				<name>body</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationId</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getMessageHash</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMessageHash</name>
			<param>
				<name>messageHash</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>from</name>
		</field>
		<field>
			<name>conversationId</name>
		</field>
		<field>
			<name>body</name>
		</field>
		<field>
			<name>createdAt</name>
		</field>
		<field>
			<name>messageHash</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Pagination</name>
		<type>com.marcelmika.lims.portal.domain.Pagination</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>toPaginationDetails</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getFirstMessageId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setFirstMessageId</name>
			<param>
				<name>firstMessageId</name>
				<type>java.lang.Integer</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getLastMessageId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setLastMessageId</name>
			<param>
				<name>lastMessageId</name>
				<type>java.lang.Integer</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getAction</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setAction</name>
			<param>
				<name>action</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>firstMessageId</name>
		</field>
		<field>
			<name>lastMessageId</name>
		</field>
		<field>
			<name>action</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Presence</name>
		<type>com.marcelmika.lims.portal.domain.Presence</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>Presence</name>
			<comment><![CDATA[Constructor]]></comment>
			<param>
				<name>code</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[which uniquely determines presence]]></comment>
			</param>
			<param>
				<name>description</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[string description of presence]]></comment>
			</param>
		</method>
		<method>
			<name>fromPresenceDetails</name>
			<comment><![CDATA[Factory method which creates new Presence from PresenceDetails]]></comment>
			<param>
				<name>presenceDetails</name>
				<type>com.marcelmika.lims.api.entity.PresenceDetails</type>
				<required>true</required>
				<comment><![CDATA[PresenceDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Presence]]></comment>
			</return>
		</method>
		<method>
			<name>toPresenceDetails</name>
			<comment><![CDATA[Maps Presence to PresenceDetails]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[PresenceDetails]]></comment>
			</return>
		</method>
		<method>
			<name>fromDescription</name>
			<comment><![CDATA[Creates Presence from String description]]></comment>
			<param>
				<name>description</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[String]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Presence]]></comment>
			</return>
		</method>
		<method>
			<name>getCode</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getDescription</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>ACTIVE</name>
		</field>
		<field>
			<name>AWAY</name>
		</field>
		<field>
			<name>DND</name>
		</field>
		<field>
			<name>OFFLINE</name>
		</field>
		<field>
			<name>UNRECOGNIZED</name>
		</field>
		<field>
			<name>code</name>
		</field>
		<field>
			<name>description</name>
		</field>
	</javadoc>
	<javadoc>
		<name>Settings</name>
		<type>com.marcelmika.lims.portal.domain.Settings</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>fromSettingsDetails</name>
			<comment><![CDATA[Create new settings and maps data from settings details]]></comment>
			<param>
				<name>settingsDetails</name>
				<type>com.marcelmika.lims.api.entity.SettingsDetails</type>
				<required>true</required>
				<comment><![CDATA[SettingsDetails]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[Settings]]></comment>
			</return>
		</method>
		<method>
			<name>toSettingsDetails</name>
			<comment><![CDATA[Maps settings to settings details]]></comment>
			<return>
				<required>true</required>
				<comment><![CDATA[SettingsDetails]]></comment>
			</return>
		</method>
		<method>
			<name>getBuddy</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setBuddy</name>
			<param>
				<name>buddy</name>
				<type>Buddy</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getPresence</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPresence</name>
			<param>
				<name>presence</name>
				<type>Presence</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getActivePanelId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setActivePanelId</name>
			<param>
				<name>activePanelId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>isMute</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setMute</name>
			<param>
				<name>isMute</name>
				<type>boolean</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>setIsMute</name>
			<param>
				<name>isMute</name>
				<type>boolean</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>isChatEnabled</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setChatEnabled</name>
			<param>
				<name>isChatEnabled</name>
				<type>boolean</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>buddy</name>
		</field>
		<field>
			<name>presence</name>
		</field>
		<field>
			<name>activePanelId</name>
		</field>
		<field>
			<name>isMute</name>
		</field>
		<field>
			<name>isChatEnabled</name>
		</field>
	</javadoc>
	<javadoc>
		<name>LoginPostAction</name>
		<type>com.marcelmika.lims.portal.hooks.LoginPostAction</type>
		<comment><![CDATA[Listens to login post action. Whenever it occurs it tries to login to the Jabber server with the credentials from the request.]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>run</name>
			<param>
				<name>request</name>
				<type>javax.servlet.http.HttpServletRequest</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.servlet.http.HttpServletResponse</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>coreService</name>
		</field>
	</javadoc>
	<javadoc>
		<name>SessionDestroyAction</name>
		<type>com.marcelmika.lims.portal.hooks.SessionDestroyAction</type>
		<comment><![CDATA[Listens to the session destroy action. Whenever it occurs it tries to login the user to the LIMS system server with the credentials from the request.]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>run</name>
			<param>
				<name>session</name>
				<type>javax.servlet.http.HttpSession</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>coreService</name>
		</field>
	</javadoc>
	<javadoc>
		<name>UserListener</name>
		<type>com.marcelmika.lims.portal.hooks.UserListener</type>
		<comment><![CDATA[Listens to the events from portal related to user.]]></comment>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>onAfterRemove</name>
			<param>
				<name>user</name>
				<type>com.liferay.portal.model.User</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>onAfterUpdate</name>
			<param>
				<name>user</name>
				<type>com.liferay.portal.model.User</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>coreService</name>
		</field>
	</javadoc>
	<javadoc>
		<name>HttpStatus</name>
		<type>com.marcelmika.lims.portal.http.HttpStatus</type>
		<comment><![CDATA[Enum which holds all necessary HTTP Status codes]]></comment>
		<author><![CDATA[Brian Wing Shun Chan]]></author>
		<method>
			<name>HttpStatus</name>
			<param>
				<name>value</name>
				<type>int</type>
				<comment><![CDATA[]]></comment>
			</param>
			<param>
				<name>reasonPhrase</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>value</name>
			<comment><![CDATA[Return the integer value of this status code.]]></comment>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>getReasonPhrase</name>
			<comment><![CDATA[Return the reason phrase of this status code.]]></comment>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>is1xxInformational</name>
			<comment><![CDATA[Whether this status code is in the HTTP series {@link org.springframework.http.HttpStatus.Series#INFORMATIONAL}. This is a shortcut for checking the value of {@link #series()}.]]></comment>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>is2xxSuccessful</name>
			<comment><![CDATA[Whether this status code is in the HTTP series {@link org.springframework.http.HttpStatus.Series#SUCCESSFUL}. This is a shortcut for checking the value of {@link #series()}.]]></comment>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>is3xxRedirection</name>
			<comment><![CDATA[Whether this status code is in the HTTP series {@link org.springframework.http.HttpStatus.Series#REDIRECTION}. This is a shortcut for checking the value of {@link #series()}.]]></comment>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>is4xxClientError</name>
			<comment><![CDATA[Whether this status code is in the HTTP series {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR}. This is a shortcut for checking the value of {@link #series()}.]]></comment>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>is5xxServerError</name>
			<comment><![CDATA[Whether this status code is in the HTTP series {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}. This is a shortcut for checking the value of {@link #series()}.]]></comment>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>series</name>
			<comment><![CDATA[Returns the HTTP status series of this status code.]]></comment>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
			<see><![CDATA[HttpStatus.Series]]></see>
		</method>
		<method>
			<name>toString</name>
			<comment><![CDATA[Return a string representation of this status code.]]></comment>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>valueOf</name>
			<comment><![CDATA[Return the enum constant of this type with the specified numeric value.]]></comment>
			<param>
				<name>statusCode</name>
				<type>int</type>
				<required>true</required>
				<comment><![CDATA[the numeric value of the enum to be returned]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[the enum constant with the specified numeric value]]></comment>
			</return>
		</method>
		<field>
			<name>CONTINUE</name>
			<comment><![CDATA[{@code 100 Continue}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.1.1">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>SWITCHING_PROTOCOLS</name>
			<comment><![CDATA[{@code 101 Switching Protocols}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.1.2">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>PROCESSING</name>
			<comment><![CDATA[{@code 102 Processing}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2518#section-10.1">WebDAV</a>]]></see>
		</field>
		<field>
			<name>CHECKPOINT</name>
			<comment><![CDATA[{@code 103 Checkpoint}.]]></comment>
			<see><![CDATA[<a href="http://code.google.com/p/gears/wiki/ResumableHttpRequestsProposal">A proposal for supporting resumable POST/PUT HTTP requests in HTTP/1.0</a>]]></see>
		</field>
		<field>
			<name>OK</name>
			<comment><![CDATA[{@code 200 OK}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.2.1">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>CREATED</name>
			<comment><![CDATA[{@code 201 Created}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.2.2">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>ACCEPTED</name>
			<comment><![CDATA[{@code 202 Accepted}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.2.3">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>NON_AUTHORITATIVE_INFORMATION</name>
			<comment><![CDATA[{@code 203 Non-Authoritative Information}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.2.4">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>NO_CONTENT</name>
			<comment><![CDATA[{@code 204 No Content}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.2.5">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>RESET_CONTENT</name>
			<comment><![CDATA[{@code 205 Reset Content}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.2.6">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>PARTIAL_CONTENT</name>
			<comment><![CDATA[{@code 206 Partial Content}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.2.7">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>MULTI_STATUS</name>
			<comment><![CDATA[{@code 207 Multi-Status}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc4918#section-13">WebDAV</a>]]></see>
		</field>
		<field>
			<name>ALREADY_REPORTED</name>
			<comment><![CDATA[{@code 208 Already Reported}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc5842#section-7.1">WebDAV Binding Extensions</a>]]></see>
		</field>
		<field>
			<name>IM_USED</name>
			<comment><![CDATA[{@code 226 IM Used}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc3229#section-10.4.1">Delta encoding in HTTP</a>]]></see>
		</field>
		<field>
			<name>MULTIPLE_CHOICES</name>
			<comment><![CDATA[{@code 300 Multiple Choices}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.3.1">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>MOVED_PERMANENTLY</name>
			<comment><![CDATA[{@code 301 Moved Permanently}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.3.2">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>FOUND</name>
			<comment><![CDATA[{@code 302 Found}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.3.3">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>MOVED_TEMPORARILY</name>
			<comment><![CDATA[{@code 302 Moved Temporarily}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc1945#section-9.3">HTTP/1.0</a>]]></see>
			<deprecated><![CDATA[In favor of {@link #FOUND} which will be returned from {@code HttpStatus.valueOf(302)}]]></deprecated>
		</field>
		<field>
			<name>SEE_OTHER</name>
			<comment><![CDATA[{@code 303 See Other}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.3.4">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>NOT_MODIFIED</name>
			<comment><![CDATA[{@code 304 Not Modified}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.3.5">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>USE_PROXY</name>
			<comment><![CDATA[{@code 305 Use Proxy}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.3.6">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>TEMPORARY_REDIRECT</name>
			<comment><![CDATA[{@code 307 Temporary Redirect}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.3.8">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>PERMANENT_REDIRECT</name>
			<comment><![CDATA[{@code 308 Permanent Redirect}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc7238">RFC 7238</a>]]></see>
		</field>
		<field>
			<name>BAD_REQUEST</name>
			<comment><![CDATA[{@code 400 Bad Request}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.1">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>UNAUTHORIZED</name>
			<comment><![CDATA[{@code 401 Unauthorized}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.2">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>PAYMENT_REQUIRED</name>
			<comment><![CDATA[{@code 402 Payment Required}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.3">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>FORBIDDEN</name>
			<comment><![CDATA[{@code 403 Forbidden}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.4">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>NOT_FOUND</name>
			<comment><![CDATA[{@code 404 Not Found}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.5">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>METHOD_NOT_ALLOWED</name>
			<comment><![CDATA[{@code 405 Method Not Allowed}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.6">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>NOT_ACCEPTABLE</name>
			<comment><![CDATA[{@code 406 Not Acceptable}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.7">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>PROXY_AUTHENTICATION_REQUIRED</name>
			<comment><![CDATA[{@code 407 Proxy Authentication Required}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.8">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>REQUEST_TIMEOUT</name>
			<comment><![CDATA[{@code 408 Request Timeout}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.9">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>CONFLICT</name>
			<comment><![CDATA[{@code 409 Conflict}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.10">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>GONE</name>
			<comment><![CDATA[{@code 410 Gone}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.11">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>LENGTH_REQUIRED</name>
			<comment><![CDATA[{@code 411 Length Required}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.12">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>PRECONDITION_FAILED</name>
			<comment><![CDATA[{@code 412 Precondition failed}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.13">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>REQUEST_ENTITY_TOO_LARGE</name>
			<comment><![CDATA[{@code 413 Request Entity Too Large}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.14">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>REQUEST_URI_TOO_LONG</name>
			<comment><![CDATA[{@code 414 Request-URI Too Long}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.15">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>UNSUPPORTED_MEDIA_TYPE</name>
			<comment><![CDATA[{@code 415 Unsupported Media Type}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.16">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>REQUESTED_RANGE_NOT_SATISFIABLE</name>
			<comment><![CDATA[{@code 416 Requested Range Not Satisfiable}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.17">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>EXPECTATION_FAILED</name>
			<comment><![CDATA[{@code 417 Expectation Failed}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.4.18">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>I_AM_A_TEAPOT</name>
			<comment><![CDATA[{@code 418 I'm a teapot}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2324#section-2.3.2">HTCPCP/1.0</a>]]></see>
		</field>
		<field>
			<name>INSUFFICIENT_SPACE_ON_RESOURCE</name>
			<deprecated><![CDATA[See <a href="http://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt">WebDAV Draft Changes</a>]]></deprecated>
		</field>
		<field>
			<name>METHOD_FAILURE</name>
			<deprecated><![CDATA[See <a href="http://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt">WebDAV Draft Changes</a>]]></deprecated>
		</field>
		<field>
			<name>DESTINATION_LOCKED</name>
			<deprecated><![CDATA[See <a href="http://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt">WebDAV Draft Changes</a>]]></deprecated>
		</field>
		<field>
			<name>UNPROCESSABLE_ENTITY</name>
			<comment><![CDATA[{@code 422 Unprocessable Entity}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc4918#section-11.2">WebDAV</a>]]></see>
		</field>
		<field>
			<name>LOCKED</name>
			<comment><![CDATA[{@code 423 Locked}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc4918#section-11.3">WebDAV</a>]]></see>
		</field>
		<field>
			<name>FAILED_DEPENDENCY</name>
			<comment><![CDATA[{@code 424 Failed Dependency}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc4918#section-11.4">WebDAV</a>]]></see>
		</field>
		<field>
			<name>UPGRADE_REQUIRED</name>
			<comment><![CDATA[{@code 426 Upgrade Required}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2817#section-6">Upgrading to TLS Within HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>PRECONDITION_REQUIRED</name>
			<comment><![CDATA[{@code 428 Precondition Required}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc6585#section-3">Additional HTTP Status Codes</a>]]></see>
		</field>
		<field>
			<name>TOO_MANY_REQUESTS</name>
			<comment><![CDATA[{@code 429 Too Many Requests}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc6585#section-4">Additional HTTP Status Codes</a>]]></see>
		</field>
		<field>
			<name>REQUEST_HEADER_FIELDS_TOO_LARGE</name>
			<comment><![CDATA[{@code 431 Request Header Fields Too Large}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc6585#section-5">Additional HTTP Status Codes</a>]]></see>
		</field>
		<field>
			<name>INTERNAL_SERVER_ERROR</name>
			<comment><![CDATA[{@code 500 Internal Server Error}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.5.1">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>NOT_IMPLEMENTED</name>
			<comment><![CDATA[{@code 501 Not Implemented}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.5.2">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>BAD_GATEWAY</name>
			<comment><![CDATA[{@code 502 Bad Gateway}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.5.3">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>SERVICE_UNAVAILABLE</name>
			<comment><![CDATA[{@code 503 Service Unavailable}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.5.4">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>GATEWAY_TIMEOUT</name>
			<comment><![CDATA[{@code 504 Gateway Timeout}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.5.5">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>HTTP_VERSION_NOT_SUPPORTED</name>
			<comment><![CDATA[{@code 505 HTTP Version Not Supported}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2616#section-10.5.6">HTTP/1.1</a>]]></see>
		</field>
		<field>
			<name>VARIANT_ALSO_NEGOTIATES</name>
			<comment><![CDATA[{@code 506 Variant Also Negotiates}]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2295#section-8.1">Transparent Content Negotiation</a>]]></see>
		</field>
		<field>
			<name>INSUFFICIENT_STORAGE</name>
			<comment><![CDATA[{@code 507 Insufficient Storage}]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc4918#section-11.5">WebDAV</a>]]></see>
		</field>
		<field>
			<name>LOOP_DETECTED</name>
			<comment><![CDATA[{@code 508 Loop Detected}]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc5842#section-7.2">WebDAV Binding Extensions</a>]]></see>
		</field>
		<field>
			<name>BANDWIDTH_LIMIT_EXCEEDED</name>
			<comment><![CDATA[{@code 509 Bandwidth Limit Exceeded}]]></comment>
		</field>
		<field>
			<name>NOT_EXTENDED</name>
			<comment><![CDATA[{@code 510 Not Extended}]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc2774#section-7">HTTP Extension Framework</a>]]></see>
		</field>
		<field>
			<name>NETWORK_AUTHENTICATION_REQUIRED</name>
			<comment><![CDATA[{@code 511 Network Authentication Required}.]]></comment>
			<see><![CDATA[<a href="http://tools.ietf.org/html/rfc6585#section-6">Additional HTTP Status Codes</a>]]></see>
		</field>
		<field>
			<name>value</name>
		</field>
		<field>
			<name>reasonPhrase</name>
		</field>
	</javadoc>
	<javadoc>
		<name>LIMSPortlet</name>
		<type>com.marcelmika.lims.portal.portlet.LIMSPortlet</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>doView</name>
			<comment><![CDATA[This method is called whenever the view is rendered. All data needed to render the main LIMS view (i.e. panels and their content) should be loaded here. Any heavy computation or long-term database operations should be avoided. Always use asynchronous ajax request (via serveResource() method) to get proper data. This method should be used for panel rendering only. <p/> All data is passed to view.jsp which is responsible for view]]></comment>
			<param>
				<name>renderRequest</name>
				<type>javax.portlet.RenderRequest</type>
				<required>true</required>
				<comment><![CDATA[RenderRequest]]></comment>
			</param>
			<param>
				<name>renderResponse</name>
				<type>javax.portlet.RenderResponse</type>
				<required>true</required>
				<comment><![CDATA[RenderResponse]]></comment>
			</param>
			<throws>
				<name>PortletException</name>
				<type>javax.portlet.PortletException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
			<throws>
				<name>IOException</name>
				<type>java.io.IOException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>renderSettings</name>
			<comment><![CDATA[Renders settings pane within the request]]></comment>
			<param>
				<name>renderRequest</name>
				<type>javax.portlet.RenderRequest</type>
				<required>true</required>
				<comment><![CDATA[RenderRequest]]></comment>
			</param>
		</method>
		<method>
			<name>renderConversations</name>
			<comment><![CDATA[Renders opened conversations. Thanks to this whenever the user goes to different page the opened conversation is already opened. In other words we don't need to wait for the ajax response.]]></comment>
			<param>
				<name>renderRequest</name>
				<type>javax.portlet.RenderRequest</type>
				<required>true</required>
				<comment><![CDATA[RenderRequest]]></comment>
			</param>
		</method>
		<method>
			<name>renderAdditions</name>
			<comment><![CDATA[Renders additional parameters needed in jsp]]></comment>
			<param>
				<name>renderRequest</name>
				<type>javax.portlet.RenderRequest</type>
				<required>true</required>
				<comment><![CDATA[RenderRequest]]></comment>
			</param>
		</method>
		<method>
			<name>serveResource</name>
			<comment><![CDATA[This method is called whenever the server gets an AJAX request from client. All asynchronous requests should go over this method.]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[Asynchronous request from client]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[Response from server]]></comment>
			</param>
			<throws>
				<name>PortletException</name>
				<type>javax.portlet.PortletException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
			<throws>
				<name>IOException</name>
				<type>java.io.IOException</type>
				<required>true</required>
				<comment><![CDATA[]]></comment>
			</throws>
		</method>
		<method>
			<name>isCorrectAttempt</name>
			<comment><![CDATA[Checks if the server request attempt is correct. In other words checks if the user is signed in.]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.PortletRequest</type>
				<required>true</required>
				<comment><![CDATA[Request]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[true if the request attempt is correct]]></comment>
			</return>
		</method>
		<field>
			<name>processor</name>
		</field>
		<field>
			<name>settingsCoreService</name>
		</field>
		<field>
			<name>conversationCoreService</name>
		</field>
		<field>
			<name>VIEW_JSP_PATH</name>
		</field>
		<field>
			<name>log</name>
		</field>
	</javadoc>
	<javadoc>
		<name>PortletDispatcher</name>
		<type>com.marcelmika.lims.portal.processor.PortletDispatcher</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>dispatchRequest</name>
			<comment><![CDATA[Calls all appropriate methods on PollerProcessor that are scheduled for the receive request event.]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[response sent to browser]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[request from browser]]></comment>
			</param>
			<param>
				<name>processor</name>
				<type>PortletProcessor</type>
				<required>true</required>
				<comment><![CDATA[poller processor]]></comment>
			</param>
		</method>
		<field>
			<name>QUERY_CREATE_SINGLE_USER_CONVERSATION</name>
		</field>
		<field>
			<name>QUERY_READ_SINGLE_USER_CONVERSATION</name>
		</field>
		<field>
			<name>QUERY_CLOSE_SINGLE_USER_CONVERSATION</name>
		</field>
		<field>
			<name>QUERY_RESET_UNREAD_MESSAGES_COUNTER</name>
		</field>
		<field>
			<name>QUERY_READ_OPENED_CONVERSATIONS</name>
		</field>
		<field>
			<name>QUERY_GET_GROUP_LIST</name>
		</field>
		<field>
			<name>QUERY_CREATE_MESSAGE</name>
		</field>
		<field>
			<name>QUERY_UPDATE_BUDDY_PRESENCE</name>
		</field>
		<field>
			<name>QUERY_UPDATE_ACTIVE_PANEL</name>
		</field>
		<field>
			<name>QUERY_UPDATE_SETTINGS</name>
		</field>
		<field>
			<name>KEY_QUERY</name>
		</field>
		<field>
			<name>log</name>
		</field>
	</javadoc>
	<javadoc>
		<name>PortletProcessor</name>
		<type>com.marcelmika.lims.portal.processor.PortletProcessorImpl</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>processRequest</name>
			<comment><![CDATA[Decides which method on PortletProcessor should be called based on the request]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[ResourceRequest]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[ResourceResponse]]></comment>
			</param>
		</method>
		<method>
			<name>updateBuddyPresence</name>
			<comment><![CDATA[Update buddy's status]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[Request]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[Response]]></comment>
			</param>
		</method>
		<method>
			<name>createSingleUserConversation</name>
			<comment><![CDATA[Creates single user conversation with a buddy selected in request]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[ResourceRequest]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[ResourceResponse]]></comment>
			</param>
		</method>
		<method>
			<name>readSingleUserConversation</name>
			<comment><![CDATA[Reads Single User Conversation messages]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[ResourceRequest]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[ResourceResponse]]></comment>
			</param>
		</method>
		<method>
			<name>closeSingleUserConversation</name>
			<comment><![CDATA[Closes Single User Conversation]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[ResourceRequest]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[ResourceResponse]]></comment>
			</param>
		</method>
		<method>
			<name>resetUnreadMessagesCounter</name>
			<comment><![CDATA[Resets unread messages counter for the given conversation and participant]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[ResourceRequest]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[ResourceResponse]]></comment>
			</param>
		</method>
		<method>
			<name>readOpenedConversations</name>
			<comment><![CDATA[Reads currently opened conversations]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[ResourceRequest]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[ResourceResponse]]></comment>
			</param>
		</method>
		<method>
			<name>createMessage</name>
			<comment><![CDATA[Create new message in conversation]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[ResourceRequest]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[ResourceResponse]]></comment>
			</param>
		</method>
		<method>
			<name>getGroupList</name>
			<comment><![CDATA[Fetches all groups related to the buddy.]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[ResourceRequest]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[ResourceResponse]]></comment>
			</param>
		</method>
		<method>
			<name>updateSettings</name>
			<comment><![CDATA[Update buddy's settings]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[ResourceRequest]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[ResourceResponse]]></comment>
			</param>
		</method>
		<method>
			<name>updateActivePanel</name>
			<comment><![CDATA[Updates buddy's active panel]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[ResourceRequest]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[ResourceResponse]]></comment>
			</param>
		</method>
		<method>
			<name>writeResponse</name>
			<comment><![CDATA[Sets status code to the response. Use for no-content responses.]]></comment>
			<param>
				<name>statusCode</name>
				<type>com.marcelmika.lims.portal.http.HttpStatus</type>
				<required>true</required>
				<comment><![CDATA[HTTP Status code]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[Resource response]]></comment>
			</param>
		</method>
		<method>
			<name>writeResponse</name>
			<comment><![CDATA[Takes the response and writes a content given in parameter and sets status code.]]></comment>
			<param>
				<name>content</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[Which will be written to the response]]></comment>
			</param>
			<param>
				<name>statusCode</name>
				<type>com.marcelmika.lims.portal.http.HttpStatus</type>
				<required>true</required>
				<comment><![CDATA[HTTP Status code]]></comment>
			</param>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[Resource response]]></comment>
			</param>
		</method>
		<method>
			<name>getResponseWriter</name>
			<comment><![CDATA[Returns writer from response, null on error]]></comment>
			<param>
				<name>response</name>
				<type>javax.portlet.ResourceResponse</type>
				<required>true</required>
				<comment><![CDATA[ResourceResponse]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[PrintWriter, null on error]]></comment>
			</return>
		</method>
		<method>
			<name>logRequest</name>
			<comment><![CDATA[Logs request data]]></comment>
			<param>
				<name>request</name>
				<type>javax.portlet.ResourceRequest</type>
				<required>true</required>
				<comment><![CDATA[ResourceRequest]]></comment>
			</param>
		</method>
		<field>
			<name>log</name>
		</field>
		<field>
			<name>buddyCoreService</name>
		</field>
		<field>
			<name>groupCoreService</name>
		</field>
		<field>
			<name>conversationCoreService</name>
		</field>
		<field>
			<name>settingsCoreService</name>
		</field>
		<field>
			<name>KEY_CONTENT</name>
		</field>
		<field>
			<name>KEY_PARAMETERS</name>
		</field>
		<field>
			<name>KEY_QUERY</name>
		</field>
	</javadoc>
	<javadoc>
		<name>CloseConversationParameters</name>
		<type>com.marcelmika.lims.portal.processor.parameters.CloseConversationParameters</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationId</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>conversationId</name>
		</field>
	</javadoc>
	<javadoc>
		<name>CreateMessageParameters</name>
		<type>com.marcelmika.lims.portal.processor.parameters.CreateMessageParameters</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationId</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>conversationId</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ReadConversationParameters</name>
		<type>com.marcelmika.lims.portal.processor.parameters.ReadConversationParameters</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationId</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getPagination</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setPagination</name>
			<param>
				<name>pagination</name>
				<type>com.marcelmika.lims.portal.domain.Pagination</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>getEtag</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setEtag</name>
			<param>
				<name>etag</name>
				<type>java.lang.Integer</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>conversationId</name>
		</field>
		<field>
			<name>pagination</name>
		</field>
		<field>
			<name>etag</name>
		</field>
	</javadoc>
	<javadoc>
		<name>ResetUnreadMessagesCounterParameters</name>
		<type>com.marcelmika.lims.portal.processor.parameters.ResetUnreadMessagesCounterParameters</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getConversationId</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<method>
			<name>setConversationId</name>
			<param>
				<name>conversationId</name>
				<type>java.lang.String</type>
				<comment><![CDATA[]]></comment>
			</param>
		</method>
		<method>
			<name>toString</name>
			<return>
				<comment><![CDATA[]]></comment>
			</return>
		</method>
		<field>
			<name>conversationId</name>
		</field>
	</javadoc>
	<javadoc>
		<name>PortletPropertiesKeys</name>
		<type>com.marcelmika.lims.portal.properties.PortletPropertiesKeys</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<field>
			<name>BUDDY_LIST_SOURCE</name>
		</field>
		<field>
			<name>BUDDY_LIST_ALLOWED_SOCIAL_RELATION_TYPES</name>
		</field>
		<field>
			<name>BUDDY_LIST_MAX_BUDDIES</name>
		</field>
		<field>
			<name>BUDDY_LIST_SITE_EXCLUDES</name>
		</field>
		<field>
			<name>BUDDY_LIST_STRATEGY</name>
		</field>
		<field>
			<name>BUDDY_LIST_IGNORE_DEFAULT_USER</name>
		</field>
		<field>
			<name>CONVERSATION_LIST_MAX_MESSAGES</name>
		</field>
		<field>
			<name>JABBER_ENABLED</name>
		</field>
		<field>
			<name>JABBER_HOST</name>
		</field>
		<field>
			<name>JABBER_PORT</name>
		</field>
		<field>
			<name>JABBER_RESOURCE</name>
		</field>
		<field>
			<name>JABBER_SERVICE_NAME</name>
		</field>
		<field>
			<name>JABBER_SOCK5_PROXY_ENABLED</name>
		</field>
		<field>
			<name>JABBER_SOCK5_PROXY_PORT</name>
		</field>
		<field>
			<name>JABBER_IMPORT_USER_ENABLED</name>
		</field>
		<field>
			<name>JABBER_SASL_PLAIN_ENABLED</name>
		</field>
		<field>
			<name>JABBER_SASL_PLAIN_AUTHID</name>
		</field>
		<field>
			<name>JABBER_SASL_PLAIN_PASSWORD</name>
		</field>
	</javadoc>
	<javadoc>
		<name>PortletPropertiesValues</name>
		<type>com.marcelmika.lims.portal.properties.PortletPropertiesValues</type>
		<author><![CDATA[Ing. Marcel Mika]]></author>
		<method>
			<name>getString</name>
			<comment><![CDATA[Returns string value from properties related to the key]]></comment>
			<param>
				<name>key</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[of the string value]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[string representation of value related to the key]]></comment>
			</return>
		</method>
		<method>
			<name>getStringValues</name>
			<comment><![CDATA[Returns an array of string values from properties related to the key]]></comment>
			<param>
				<name>key</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[of the string value]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[an array of string representation of values related to the key]]></comment>
			</return>
		</method>
		<method>
			<name>getInteger</name>
			<comment><![CDATA[Returns integer value from properties related to the key]]></comment>
			<param>
				<name>key</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[of the integer value]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[integer representation of value related to the key]]></comment>
			</return>
		</method>
		<method>
			<name>getIntegerValues</name>
			<comment><![CDATA[Returns and array of int values from properties related to the key]]></comment>
			<param>
				<name>key</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[of the integer values]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[an array of int representation of values related to the key]]></comment>
			</return>
		</method>
		<method>
			<name>getBoolean</name>
			<comment><![CDATA[Returns boolean value from properties related to the key]]></comment>
			<param>
				<name>key</name>
				<type>java.lang.String</type>
				<required>true</required>
				<comment><![CDATA[of the boolean value]]></comment>
			</param>
			<return>
				<required>true</required>
				<comment><![CDATA[boolean representation of value related to the key]]></comment>
			</return>
		</method>
		<field>
			<name>BUDDY_LIST_SOURCE</name>
		</field>
		<field>
			<name>BUDDY_LIST_ALLOWED_SOCIAL_RELATION_TYPES</name>
		</field>
		<field>
			<name>BUDDY_LIST_SITE_EXCLUDES</name>
		</field>
		<field>
			<name>BUDDY_LIST_MAX_BUDDIES</name>
		</field>
		<field>
			<name>BUDDY_LIST_STRATEGY</name>
		</field>
		<field>
			<name>BUDDY_LIST_IGNORE_DEFAULT_USER</name>
		</field>
		<field>
			<name>CONVERSATION_LIST_MAX_MESSAGES</name>
		</field>
		<field>
			<name>JABBER_ENABLED</name>
		</field>
		<field>
			<name>JABBER_HOST</name>
		</field>
		<field>
			<name>JABBER_PORT</name>
		</field>
		<field>
			<name>JABBER_SERVICE_NAME</name>
		</field>
		<field>
			<name>JABBER_RESOURCE</name>
		</field>
		<field>
			<name>JABBER_SOCK5_PROXY_ENABLED</name>
		</field>
		<field>
			<name>JABBER_SOCK5_PROXY_PORT</name>
		</field>
		<field>
			<name>JABBER_IMPORT_USER_ENABLED</name>
		</field>
		<field>
			<name>JABBER_SASL_PLAIN_ENABLED</name>
		</field>
		<field>
			<name>JABBER_SASL_PLAIN_AUTHID</name>
		</field>
		<field>
			<name>JABBER_SASL_PLAIN_PASSWORD</name>
		</field>
	</javadoc>
</javadocs>