/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.marcelmika.limsmuc.persistence.generated.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.marcelmika.limsmuc.persistence.generated.model.Synchronization;
import com.marcelmika.limsmuc.persistence.generated.model.SynchronizationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Synchronization service. Represents a row in the &quot;Limsmuc_Synchronization&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.marcelmika.limsmuc.persistence.generated.model.SynchronizationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SynchronizationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SynchronizationImpl
 * @see com.marcelmika.limsmuc.persistence.generated.model.Synchronization
 * @see com.marcelmika.limsmuc.persistence.generated.model.SynchronizationModel
 * @generated
 */
public class SynchronizationModelImpl extends BaseModelImpl<Synchronization>
	implements SynchronizationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a synchronization model instance should use the {@link com.marcelmika.limsmuc.persistence.generated.model.Synchronization} interface instead.
	 */
	public static final String TABLE_NAME = "Limsmuc_Synchronization";
	public static final Object[][] TABLE_COLUMNS = {
			{ "sid", Types.BIGINT },
			{ "sucSync", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table Limsmuc_Synchronization (sid LONG not null primary key,sucSync BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Limsmuc_Synchronization";
	public static final String ORDER_BY_JPQL = " ORDER BY synchronization.sid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Limsmuc_Synchronization.sid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.marcelmika.limsmuc.persistence.generated.model.Synchronization"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.marcelmika.limsmuc.persistence.generated.model.Synchronization"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.marcelmika.limsmuc.persistence.generated.model.Synchronization"));

	public SynchronizationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Synchronization.class;
	}

	@Override
	public String getModelClassName() {
		return Synchronization.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("sid", getSid());
		attributes.put("sucSync", getSucSync());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long sid = (Long)attributes.get("sid");

		if (sid != null) {
			setSid(sid);
		}

		Boolean sucSync = (Boolean)attributes.get("sucSync");

		if (sucSync != null) {
			setSucSync(sucSync);
		}
	}

	@Override
	public long getSid() {
		return _sid;
	}

	@Override
	public void setSid(long sid) {
		_sid = sid;
	}

	@Override
	public boolean getSucSync() {
		return _sucSync;
	}

	@Override
	public boolean isSucSync() {
		return _sucSync;
	}

	@Override
	public void setSucSync(boolean sucSync) {
		_sucSync = sucSync;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Synchronization.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Synchronization toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Synchronization)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SynchronizationImpl synchronizationImpl = new SynchronizationImpl();

		synchronizationImpl.setSid(getSid());
		synchronizationImpl.setSucSync(getSucSync());

		synchronizationImpl.resetOriginalValues();

		return synchronizationImpl;
	}

	@Override
	public int compareTo(Synchronization synchronization) {
		long primaryKey = synchronization.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Synchronization)) {
			return false;
		}

		Synchronization synchronization = (Synchronization)obj;

		long primaryKey = synchronization.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Synchronization> toCacheModel() {
		SynchronizationCacheModel synchronizationCacheModel = new SynchronizationCacheModel();

		synchronizationCacheModel.sid = getSid();

		synchronizationCacheModel.sucSync = getSucSync();

		return synchronizationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{sid=");
		sb.append(getSid());
		sb.append(", sucSync=");
		sb.append(getSucSync());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append(
			"com.marcelmika.limsmuc.persistence.generated.model.Synchronization");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>sid</column-name><column-value><![CDATA[");
		sb.append(getSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sucSync</column-name><column-value><![CDATA[");
		sb.append(getSucSync());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Synchronization.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Synchronization.class
		};
	private long _sid;
	private boolean _sucSync;
	private Synchronization _escapedModel;
}